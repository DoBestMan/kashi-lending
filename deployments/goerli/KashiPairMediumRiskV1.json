{
    "address": "0x1Ec0eECed89D8c4840cBC0Dd554F83A5Da6a1a2B",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "contract IBentoBoxV1",
                    "name": "bentoBox_",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_spender",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "Approval",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "accruedAmount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "feeFraction",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint64",
                    "name": "rate",
                    "type": "uint64"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "utilization",
                    "type": "uint256"
                }
            ],
            "name": "LogAccrue",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "share",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "fraction",
                    "type": "uint256"
                }
            ],
            "name": "LogAddAsset",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "share",
                    "type": "uint256"
                }
            ],
            "name": "LogAddCollateral",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "feeAmount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "part",
                    "type": "uint256"
                }
            ],
            "name": "LogBorrow",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "rate",
                    "type": "uint256"
                }
            ],
            "name": "LogExchangeRate",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "newFeeTo",
                    "type": "address"
                }
            ],
            "name": "LogFeeTo",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "share",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "fraction",
                    "type": "uint256"
                }
            ],
            "name": "LogRemoveAsset",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "share",
                    "type": "uint256"
                }
            ],
            "name": "LogRemoveCollateral",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "part",
                    "type": "uint256"
                }
            ],
            "name": "LogRepay",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "feeTo",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "feesEarnedFraction",
                    "type": "uint256"
                }
            ],
            "name": "LogWithdrawFees",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "previousOwner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "inputs": [],
            "name": "accrue",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "accrueInfo",
            "outputs": [
                {
                    "internalType": "uint64",
                    "name": "interestPerSecond",
                    "type": "uint64"
                },
                {
                    "internalType": "uint64",
                    "name": "lastAccrued",
                    "type": "uint64"
                },
                {
                    "internalType": "uint128",
                    "name": "feesEarnedFraction",
                    "type": "uint128"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "bool",
                    "name": "skim",
                    "type": "bool"
                },
                {
                    "internalType": "uint256",
                    "name": "share",
                    "type": "uint256"
                }
            ],
            "name": "addAsset",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "fraction",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "bool",
                    "name": "skim",
                    "type": "bool"
                },
                {
                    "internalType": "uint256",
                    "name": "share",
                    "type": "uint256"
                }
            ],
            "name": "addCollateral",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "allowance",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "approve",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "asset",
            "outputs": [
                {
                    "internalType": "contract IERC20",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "bentoBox",
            "outputs": [
                {
                    "internalType": "contract IBentoBoxV1",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "borrow",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "part",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "share",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "claimOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "collateral",
            "outputs": [
                {
                    "internalType": "contract IERC20",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint8[]",
                    "name": "actions",
                    "type": "uint8[]"
                },
                {
                    "internalType": "uint256[]",
                    "name": "values",
                    "type": "uint256[]"
                },
                {
                    "internalType": "bytes[]",
                    "name": "datas",
                    "type": "bytes[]"
                }
            ],
            "name": "cook",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "value1",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "value2",
                    "type": "uint256"
                }
            ],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "decimals",
            "outputs": [
                {
                    "internalType": "uint8",
                    "name": "",
                    "type": "uint8"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "exchangeRate",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "feeTo",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "contract IERC20",
                    "name": "collateral_",
                    "type": "address"
                },
                {
                    "internalType": "contract IERC20",
                    "name": "asset_",
                    "type": "address"
                },
                {
                    "internalType": "contract IOracle",
                    "name": "oracle_",
                    "type": "address"
                },
                {
                    "internalType": "bytes",
                    "name": "oracleData_",
                    "type": "bytes"
                }
            ],
            "name": "getInitData",
            "outputs": [
                {
                    "internalType": "bytes",
                    "name": "data",
                    "type": "bytes"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes",
                    "name": "data",
                    "type": "bytes"
                }
            ],
            "name": "init",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "user",
                    "type": "address"
                },
                {
                    "internalType": "bool",
                    "name": "open",
                    "type": "bool"
                }
            ],
            "name": "isSolvent",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address[]",
                    "name": "users",
                    "type": "address[]"
                },
                {
                    "internalType": "uint256[]",
                    "name": "borrowParts",
                    "type": "uint256[]"
                },
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "contract ISwapper",
                    "name": "swapper",
                    "type": "address"
                },
                {
                    "internalType": "bool",
                    "name": "open",
                    "type": "bool"
                }
            ],
            "name": "liquidate",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "masterContract",
            "outputs": [
                {
                    "internalType": "contract KashiPairMediumRiskV1",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "nonces",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "oracle",
            "outputs": [
                {
                    "internalType": "contract IOracle",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "oracleData",
            "outputs": [
                {
                    "internalType": "bytes",
                    "name": "",
                    "type": "bytes"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "pendingOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "owner_",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "deadline",
                    "type": "uint256"
                },
                {
                    "internalType": "uint8",
                    "name": "v",
                    "type": "uint8"
                },
                {
                    "internalType": "bytes32",
                    "name": "r",
                    "type": "bytes32"
                },
                {
                    "internalType": "bytes32",
                    "name": "s",
                    "type": "bytes32"
                }
            ],
            "name": "permit",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "fraction",
                    "type": "uint256"
                }
            ],
            "name": "removeAsset",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "share",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "share",
                    "type": "uint256"
                }
            ],
            "name": "removeCollateral",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "bool",
                    "name": "skim",
                    "type": "bool"
                },
                {
                    "internalType": "uint256",
                    "name": "part",
                    "type": "uint256"
                }
            ],
            "name": "repay",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newFeeTo",
                    "type": "address"
                }
            ],
            "name": "setFeeTo",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "contract ISwapper",
                    "name": "swapper",
                    "type": "address"
                },
                {
                    "internalType": "bool",
                    "name": "enable",
                    "type": "bool"
                }
            ],
            "name": "setSwapper",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "contract ISwapper",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "swappers",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalAsset",
            "outputs": [
                {
                    "internalType": "uint128",
                    "name": "elastic",
                    "type": "uint128"
                },
                {
                    "internalType": "uint128",
                    "name": "base",
                    "type": "uint128"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalBorrow",
            "outputs": [
                {
                    "internalType": "uint128",
                    "name": "elastic",
                    "type": "uint128"
                },
                {
                    "internalType": "uint128",
                    "name": "base",
                    "type": "uint128"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalCollateralShare",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "transfer",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                },
                {
                    "internalType": "bool",
                    "name": "direct",
                    "type": "bool"
                },
                {
                    "internalType": "bool",
                    "name": "renounce",
                    "type": "bool"
                }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "updateExchangeRate",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "updated",
                    "type": "bool"
                },
                {
                    "internalType": "uint256",
                    "name": "rate",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "userBorrowPart",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "userCollateralShare",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdrawFees",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0x3286fc8546d115b7f385207c26bbea7090c8b9261afa57a4bf453a24fc748e62",
    "receipt": {
        "to": null,
        "from": "0x66734b86c75e569805A3d75f76D2167D5EF28A92",
        "contractAddress": "0x1Ec0eECed89D8c4840cBC0Dd554F83A5Da6a1a2B",
        "transactionIndex": 0,
        "gasUsed": "5391372",
        "logsBloom": "0x
        "blockHash": "0xceb96ed586766da5acdb465e4a9044d07346e82908132259e3f9beee6136ae22",
        "transactionHash": "0x3286fc8546d115b7f385207c26bbea7090c8b9261afa57a4bf453a24fc748e62",
        "logs": [
            {
                "transactionIndex": 0,
                "blockNumber": 4407148,
                "transactionHash": "0x3286fc8546d115b7f385207c26bbea7090c8b9261afa57a4bf453a24fc748e62",
                "address": "0x1Ec0eECed89D8c4840cBC0Dd554F83A5Da6a1a2B",
                "topics": [
                    "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                    "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "0x00000000000000000000000066734b86c75e569805a3d75f76d2167d5ef28a92"
                ],
                "data": "0x",
                "logIndex": 0,
                "blockHash": "0xceb96ed586766da5acdb465e4a9044d07346e82908132259e3f9beee6136ae22"
            }
        ],
        "blockNumber": 4407148,
        "cumulativeGasUsed": "5391372",
        "status": 1,
        "byzantium": true
    },
    "args": ["0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6"],
    "solcInputHash": "1cbd168d375a3f907b3e9875f0fc1cde",
    "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"bentoBox_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accruedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeFraction\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"rate\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"utilization\",\"type\":\"uint256\"}],\"name\":\"LogAccrue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fraction\",\"type\":\"uint256\"}],\"name\":\"LogAddAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"LogAddCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"name\":\"LogBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"LogExchangeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"LogFeeTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fraction\",\"type\":\"uint256\"}],\"name\":\"LogRemoveAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"LogRemoveCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"name\":\"LogRepay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feesEarnedFraction\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accrue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrueInfo\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"interestPerSecond\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastAccrued\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"feesEarnedFraction\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"skim\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"addAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fraction\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"skim\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"actions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"cook\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value2\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateral_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"asset_\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"oracle_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"oracleData_\",\"type\":\"bytes\"}],\"name\":\"getInitData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"isSolvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowParts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract ISwapper\",\"name\":\"swapper\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterContract\",\"outputs\":[{\"internalType\":\"contract KashiPairMediumRiskV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fraction\",\"type\":\"uint256\"}],\"name\":\"removeAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"removeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"skim\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapper\",\"name\":\"swapper\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapper\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swappers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAsset\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"elastic\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"base\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrow\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"elastic\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"base\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollateralShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateExchangeRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"updated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBorrowPart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCollateralShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract allows contract calls to any contract (except BentoBox) from arbitrary callers thus, don't trust calls from this contract in any circumstances.\",\"kind\":\"dev\",\"methods\":{\"addAsset(address,bool,uint256)\":{\"params\":{\"share\":\"The amount of shares to add.\",\"skim\":\"True if the amount should be skimmed from the deposit balance of msg.sender. False if tokens from msg.sender in `bentoBox` should be transferred.\",\"to\":\"The address of the user to receive the assets.\"},\"returns\":{\"fraction\":\"Total fractions added.\"}},\"addCollateral(address,bool,uint256)\":{\"params\":{\"share\":\"The amount of shares to add for `to`.\",\"skim\":\"True if the amount should be skimmed from the deposit balance of msg.sender. False if tokens from msg.sender in `bentoBox` should be transferred.\",\"to\":\"The receiver of the tokens.\"}},\"approve(address,uint256)\":{\"params\":{\"amount\":\"The maximum collective amount that `spender` can draw.\",\"spender\":\"Address of the party that can draw from msg.sender's account.\"},\"returns\":{\"_0\":\"(bool) Returns True if approved.\"}},\"borrow(address,uint256)\":{\"returns\":{\"part\":\"Total part of the debt held by borrowers.\",\"share\":\"Total amount in shares borrowed.\"}},\"cook(uint8[],uint256[],bytes[])\":{\"params\":{\"actions\":\"An array with a sequence of actions to execute (see ACTION_ declarations).\",\"datas\":\"A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\",\"values\":\"A one-to-one mapped array to `actions`. ETH amounts to send along with the actions. Only applicable to `ACTION_CALL`, `ACTION_BENTO_DEPOSIT`.\"},\"returns\":{\"value1\":\"May contain the first positioned return value of the last executed action (if applicable).\",\"value2\":\"May contain the second positioned return value of the last executed action which returns 2 values (if applicable).\"}},\"init(bytes)\":{\"details\":\"`data` is abi encoded in the format: (IERC20 collateral, IERC20 asset, IOracle oracle, bytes oracleData)\"},\"isSolvent(address,bool)\":{\"params\":{\"open\":\"If True then the check is perfomed with `OPEN_COLLATERIZATION_RATE` else with `CLOSED_COLLATERIZATION_RATE`.\",\"user\":\"The address of the user in question.\"},\"returns\":{\"_0\":\"(bool) User is solvent if True.\"}},\"liquidate(address[],uint256[],address,address,bool)\":{\"params\":{\"borrowParts\":\"A one-to-one mapping to `users`, contains partial borrow amounts (to liquidate) of the respective user.\",\"open\":\"True to perform a open liquidation else False.\",\"swapper\":\"Contract address of the `ISwapper` implementation. Swappers are restricted for closed liquidations. See `setSwapper`.\",\"to\":\"Address of the receiver in open liquidations if `swapper` is zero.\",\"users\":\"An array of user addresses.\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"This permit must be redeemed before this deadline (UTC timestamp in seconds).\",\"owner_\":\"Address of the owner.\",\"spender\":\"The address of the spender that gets approved to draw from `owner_`.\",\"value\":\"The maximum collective amount that `spender` can draw.\"}},\"removeAsset(address,uint256)\":{\"params\":{\"fraction\":\"The amount/fraction of assets held to remove.\",\"to\":\"The user that receives the removed assets.\"},\"returns\":{\"share\":\"The amount of shares transferred to `to`.\"}},\"removeCollateral(address,uint256)\":{\"params\":{\"share\":\"Amount of shares to remove.\",\"to\":\"The receiver of the shares.\"}},\"repay(address,bool,uint256)\":{\"params\":{\"part\":\"The amount to repay. See `userBorrowPart`.\",\"skim\":\"True if the amount should be skimmed from the deposit balance of msg.sender. False if tokens from msg.sender in `bentoBox` should be transferred.\",\"to\":\"Address of the user this payment should go.\"},\"returns\":{\"amount\":\"The total amount repayed.\"}},\"setFeeTo(address)\":{\"params\":{\"newFeeTo\":\"The address of the receiver.\"}},\"setSwapper(address,bool)\":{\"params\":{\"enable\":\"True to enable the swapper. To disable use False.\",\"swapper\":\"The address of the swapper contract that conforms to `ISwapper`.\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"of the tokens to move.\",\"to\":\"The address to move the tokens.\"},\"returns\":{\"_0\":\"(bool) Returns True if succeeded.\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The token amount to move.\",\"from\":\"Address to draw tokens from.\",\"to\":\"The address to move the tokens.\"},\"returns\":{\"_0\":\"(bool) Returns True if succeeded.\"}},\"transferOwnership(address,bool,bool)\":{\"params\":{\"direct\":\"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\",\"newOwner\":\"Address of the new owner.\",\"renounce\":\"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\"}},\"updateExchangeRate()\":{\"returns\":{\"rate\":\"The new exchange rate.\",\"updated\":\"True if `exchangeRate` was updated.\"}}},\"title\":\"KashiPair\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accrue()\":{\"notice\":\"Accrues the interest on the borrowed tokens and handles the accumulation of fees.\"},\"addAsset(address,bool,uint256)\":{\"notice\":\"Adds assets to the lending pair.\"},\"addCollateral(address,bool,uint256)\":{\"notice\":\"Adds `collateral` from msg.sender to the account `to`.\"},\"allowance(address,address)\":{\"notice\":\"owner > spender > allowance mapping.\"},\"approve(address,uint256)\":{\"notice\":\"Approves `amount` from sender to be spend by `spender`.\"},\"balanceOf(address)\":{\"notice\":\"owner > balance mapping.\"},\"borrow(address,uint256)\":{\"notice\":\"Sender borrows `amount` and transfers it to `to`.\"},\"claimOwnership()\":{\"notice\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"constructor\":\"The constructor is only used for the initial master contract. Subsequent clones are initialised via `init`.\",\"cook(uint8[],uint256[],bytes[])\":{\"notice\":\"Executes a set of actions and allows composability (contract calls) to other contracts.\"},\"exchangeRate()\":{\"notice\":\"Exchange and interest rate tracking. This is 'cached' here because calls to Oracles can be very expensive.\"},\"getInitData(address,address,address,bytes)\":{\"notice\":\"Helper function to get the abi encoded bytes for the `init` function.\"},\"init(bytes)\":{\"notice\":\"Serves as the constructor for clones, as clones can't have a regular constructor\"},\"isSolvent(address,bool)\":{\"notice\":\"Checks if the user is solvent. Has an option `open` to check if the user is solvent in an open/closed liquidation case.\"},\"liquidate(address[],uint256[],address,address,bool)\":{\"notice\":\"Handles the liquidation of users' balances, once the users' amount of collateral is too low.\"},\"nonces(address)\":{\"notice\":\"owner > nonce mapping. Used in `permit`.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approves `value` from `owner_` to be spend by `spender`.\"},\"removeAsset(address,uint256)\":{\"notice\":\"Removes an asset from msg.sender and transfers it to `to`.\"},\"removeCollateral(address,uint256)\":{\"notice\":\"Removes `share` amount of collateral and transfers it to `to`.\"},\"repay(address,bool,uint256)\":{\"notice\":\"Repays a loan.\"},\"setFeeTo(address)\":{\"notice\":\"Sets the beneficiary of fees accrued in liquidations. MasterContract Only Admin function.\"},\"setSwapper(address,bool)\":{\"notice\":\"Used to register and enable or disable swapper contracts used in closed liquidations. MasterContract Only Admin function.\"},\"transfer(address,uint256)\":{\"notice\":\"Transfers `amount` tokens from `msg.sender` to `to`.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers `amount` tokens from `from` to `to`. Caller needs approval for `from`.\"},\"transferOwnership(address,bool,bool)\":{\"notice\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.\"},\"updateExchangeRate()\":{\"notice\":\"Gets the exchange rate. I.e how much collateral to buy 1e18 asset. This function is supposed to be invoked if needed because Oracle queries can be expensive.\"},\"withdrawFees()\":{\"notice\":\"Withdraws the fees accumulated.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/KashiPairFlat.sol\":\"KashiPairMediumRiskV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/flat/KashiPairFlat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Kashi Lending Medium Risk Pair\\n//  __  __             __    __      _____                  __ __\\n// |  |/  .---.-.-----|  |--|__|    |     |_.-----.-----.--|  |__.-----.-----.\\n// |     <|  _  |__ --|     |  |    |       |  -__|     |  _  |  |     |  _  |\\n// |__|\\\\__|___._|_____|__|__|__|    |_______|_____|__|__|_____|__|__|__|___  |\\n//                                                                     |_____|\\n\\n// Copyright (c) 2021 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Special thanks to:\\n// @burger_crypto - for the idea of trying to let the LPs benefit from liquidations\\n\\n// Version: 9-Mar-2021\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable no-inline-assembly\\n// solhint-disable not-rely-on-time\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.1.0\\n// License-Identifier: MIT\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.1.0\\n// License-Identifier: MIT\\n\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    address private constant ZERO_ADDRESS = address(0);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(ZERO_ADDRESS, msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != ZERO_ADDRESS || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = ZERO_ADDRESS;\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = ZERO_ADDRESS;\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/Domain.sol@v1.1.0\\n// License-Identifier: MIT\\n// Based on code and smartness by Ross Campbell and Keno\\n// Uses immutable to store the domain separator to reduce gas usage\\n// If the chain id changes due to a fork, the forked chain will calculate on the fly.\\n\\ncontract Domain {\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH = keccak256(\\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n\\n    // solhint-disable var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;    \\n\\n    /// @dev Calculate the DOMAIN_SEPARATOR\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                DOMAIN_SEPARATOR_SIGNATURE_HASH,\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    constructor() public {\\n        uint256 chainId; assembly {chainId := chainid()}\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    /// @dev Return the DOMAIN_SEPARATOR\\n    // It's named internal to allow making it public from the contract that uses it by creating a simple view function\\n    // with the desired public name, such as DOMAIN_SEPARATOR or domainSeparator.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _domainSeparator() internal view returns (bytes32) {\\n        uint256 chainId; assembly {chainId := chainid()}\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    function _getDigest(bytes32 dataHash) internal view returns (bytes32 digest) {\\n        digest =\\n            keccak256(\\n                abi.encodePacked(\\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\\n                    _domainSeparator(),\\n                    dataHash\\n                )\\n            );\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/ERC20.sol@v1.1.0\\n// License-Identifier: MIT\\n\\n// solhint-disable no-inline-assembly\\n// solhint-disable not-rely-on-time\\n\\n// Data part taken out for building of contracts that receive delegate calls\\ncontract ERC20Data {\\n    /// @notice owner > balance mapping.\\n    mapping(address => uint256) public balanceOf;\\n    /// @notice owner > spender > allowance mapping.\\n    mapping(address => mapping(address => uint256)) public allowance;\\n    /// @notice owner > nonce mapping. Used in `permit`.\\n    mapping(address => uint256) public nonces;\\n}\\n\\ncontract ERC20 is ERC20Data, Domain {\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    /// @notice Transfers `amount` tokens from `msg.sender` to `to`.\\n    /// @param to The address to move the tokens.\\n    /// @param amount of the tokens to move.\\n    /// @return (bool) Returns True if succeeded.\\n    function transfer(address to, uint256 amount) public returns (bool) {\\n        // If `amount` is 0, or `msg.sender` is `to` nothing happens\\n        if (amount != 0) {\\n            uint256 srcBalance = balanceOf[msg.sender];\\n            require(srcBalance >= amount, \\\"ERC20: balance too low\\\");\\n            if (msg.sender != to) {\\n                require(to != address(0), \\\"ERC20: no zero address\\\"); // Moved down so low balance calls safe some gas\\n\\n                balanceOf[msg.sender] = srcBalance - amount; // Underflow is checked\\n                balanceOf[to] += amount; // Can't overflow because totalSupply would be greater than 2^256-1\\n            }\\n        }\\n        emit Transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    /// @notice Transfers `amount` tokens from `from` to `to`. Caller needs approval for `from`.\\n    /// @param from Address to draw tokens from.\\n    /// @param to The address to move the tokens.\\n    /// @param amount The token amount to move.\\n    /// @return (bool) Returns True if succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public returns (bool) {\\n        // If `amount` is 0, or `from` is `to` nothing happens\\n        if (amount != 0) {\\n            uint256 srcBalance = balanceOf[from];\\n            require(srcBalance >= amount, \\\"ERC20: balance too low\\\");\\n\\n            if (from != to) {\\n                uint256 spenderAllowance = allowance[from][msg.sender];\\n                // If allowance is infinite, don't decrease it to save on gas (breaks with EIP-20).\\n                if (spenderAllowance != type(uint256).max) {\\n                    require(spenderAllowance >= amount, \\\"ERC20: allowance too low\\\");\\n                    allowance[from][msg.sender] = spenderAllowance - amount; // Underflow is checked\\n                }\\n                require(to != address(0), \\\"ERC20: no zero address\\\"); // Moved down so other failed calls safe some gas\\n\\n                balanceOf[from] = srcBalance - amount; // Underflow is checked\\n                balanceOf[to] += amount; // Can't overflow because totalSupply would be greater than 2^256-1\\n            }\\n        }\\n        emit Transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /// @notice Approves `amount` from sender to be spend by `spender`.\\n    /// @param spender Address of the party that can draw from msg.sender's account.\\n    /// @param amount The maximum collective amount that `spender` can draw.\\n    /// @return (bool) Returns True if approved.\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 private constant PERMIT_SIGNATURE_HASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    /// @notice Approves `value` from `owner_` to be spend by `spender`.\\n    /// @param owner_ Address of the owner.\\n    /// @param spender The address of the spender that gets approved to draw from `owner_`.\\n    /// @param value The maximum collective amount that `spender` can draw.\\n    /// @param deadline This permit must be redeemed before this deadline (UTC timestamp in seconds).\\n    function permit(\\n        address owner_,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(owner_ != address(0), \\\"ERC20: Owner cannot be 0\\\");\\n        require(block.timestamp < deadline, \\\"ERC20: Expired\\\");\\n        require(ecrecover(_getDigest(keccak256(abi.encode(\\n                PERMIT_SIGNATURE_HASH, owner_, spender, value, nonces[owner_]++, deadline\\n            ))), v, r, s) == owner_, \\\"ERC20: Invalid Signature\\\");\\n        allowance[owner_][spender] = value;\\n        emit Approval(owner_, spender, value);\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol@v1.1.0\\n// License-Identifier: MIT\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.1.0\\n// License-Identifier: MIT\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.1.0\\n// License-Identifier: MIT\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.1.0\\n// License-Identifier: MIT\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n}\\n\\n// File @sushiswap/bentobox-sdk/contracts/IBatchFlashBorrower.sol@v1.0.0\\n// License-Identifier: MIT\\n\\ninterface IBatchFlashBorrower {\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File @sushiswap/bentobox-sdk/contracts/IFlashBorrower.sol@v1.0.0\\n// License-Identifier: MIT\\n\\ninterface IFlashBorrower {\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File @sushiswap/bentobox-sdk/contracts/IStrategy.sol@v1.0.0\\n// License-Identifier: MIT\\n\\ninterface IStrategy {\\n    // Send the assets to the Strategy and call skim to invest them\\n    function skim(uint256 amount) external;\\n\\n    // Harvest any profits made converted to the asset and pass them to the caller\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    // Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    // The actualAmount should be very close to the amount. The difference should NOT be used to report a loss. That's what harvest is for.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    // Withdraw all assets in the safest way possible. This shouldn't fail.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\n// File @sushiswap/bentobox-sdk/contracts/IBentoBoxV1.sol@v1.0.0\\n// License-Identifier: MIT\\n\\ninterface IBentoBoxV1 {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n    event LogDeposit(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogFlashLoan(address indexed borrower, address indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n    event LogRegisterProtocol(address indexed protocol);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogStrategyDivest(address indexed token, uint256 amount);\\n    event LogStrategyInvest(address indexed token, uint256 amount);\\n    event LogStrategyLoss(address indexed token, uint256 amount);\\n    event LogStrategyProfit(address indexed token, uint256 amount);\\n    event LogStrategyQueued(address indexed token, address indexed strategy);\\n    event LogStrategySet(address indexed token, address indexed strategy);\\n    event LogStrategyTargetPercentage(address indexed token, uint256 targetPercentage);\\n    event LogTransfer(address indexed token, address indexed from, address indexed to, uint256 share);\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogWithdraw(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function balanceOf(IERC20, address) external view returns (uint256);\\n\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results);\\n\\n    function batchFlashLoan(\\n        IBatchFlashBorrower borrower,\\n        address[] calldata receivers,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    function claimOwnership() external;\\n\\n    function deploy(\\n        address masterContract,\\n        bytes calldata data,\\n        bool useCreate2\\n    ) external payable;\\n\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    function flashLoan(\\n        IFlashBorrower borrower,\\n        address receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function harvest(\\n        IERC20 token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) external;\\n\\n    function masterContractApproved(address, address) external view returns (bool);\\n\\n    function masterContractOf(address) external view returns (address);\\n\\n    function nonces(address) external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function pendingStrategy(IERC20) external view returns (IStrategy);\\n\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function registerProtocol() external;\\n\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function setStrategy(IERC20 token, IStrategy newStrategy) external;\\n\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) external;\\n\\n    function strategy(IERC20) external view returns (IStrategy);\\n\\n    function strategyData(IERC20)\\n        external\\n        view\\n        returns (\\n            uint64 strategyStartDate,\\n            uint64 targetPercentage,\\n            uint128 balance\\n        );\\n\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    function totals(IERC20) external view returns (uint128 elastic, uint128 base);\\n\\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    function transferMultiple(\\n        IERC20 token,\\n        address from,\\n        address[] calldata tos,\\n        uint256[] calldata shares\\n    ) external;\\n\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) external;\\n\\n    function whitelistMasterContract(address masterContract, bool approved) external;\\n\\n    function whitelistedMasterContracts(address) external view returns (bool);\\n\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n}\\n\\n// File contracts/interfaces/IOracle.sol\\n// License-Identifier: MIT\\n\\ninterface IOracle {\\n    /// @notice Get the latest exchange rate.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return success if no valid (recent) rate is available, return false else true.\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function get(bytes calldata data) external returns (bool success, uint256 rate);\\n\\n    /// @notice Check the last exchange rate without any state changes.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return success if no valid (recent) rate is available, return false else true.\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function peek(bytes calldata data) external view returns (bool success, uint256 rate);\\n\\n    /// @notice Returns a human readable (short) name about this oracle.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return (string) A human readable symbol name about this oracle.\\n    function symbol(bytes calldata data) external view returns (string memory);\\n\\n    /// @notice Returns a human readable name about this oracle.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return (string) A human readable name about this oracle.\\n    function name(bytes calldata data) external view returns (string memory);\\n}\\n\\n// File contracts/interfaces/ISwapper.sol\\n// License-Identifier: MIT\\n\\ninterface ISwapper {\\n    /// @notice Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper.\\n    /// Swaps it for at least 'amountToMin' of token 'to'.\\n    /// Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer.\\n    /// Returns the amount of tokens 'to' transferred to BentoBox.\\n    /// (The BentoBox skim function will be used by the caller to get the swapped funds).\\n    function swap(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        address recipient,\\n        uint256 shareToMin,\\n        uint256 shareFrom\\n    ) external returns (uint256 extraShare, uint256 shareReturned);\\n\\n    /// @notice Calculates the amount of token 'from' needed to complete the swap (amountFrom),\\n    /// this should be less than or equal to amountFromMax.\\n    /// Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper.\\n    /// Swaps it for exactly 'exactAmountTo' of token 'to'.\\n    /// Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer.\\n    /// Transfers allocated, but unused 'from' tokens within the BentoBox to 'refundTo' (amountFromMax - amountFrom).\\n    /// Returns the amount of 'from' tokens withdrawn from BentoBox (amountFrom).\\n    /// (The BentoBox skim function will be used by the caller to get the swapped funds).\\n    function swapExact(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        address recipient,\\n        address refundTo,\\n        uint256 shareFromSupplied,\\n        uint256 shareToExact\\n    ) external returns (uint256 shareUsed, uint256 shareReturned);\\n}\\n\\n// File contracts/KashiPair.sol\\n// License-Identifier: UNLICENSED\\n// Kashi Lending Medium Risk\\n\\n/// @title KashiPair\\n/// @dev This contract allows contract calls to any contract (except BentoBox)\\n/// from arbitrary callers thus, don't trust calls from this contract in any circumstances.\\ncontract KashiPairMediumRiskV1 is ERC20, BoringOwnable, IMasterContract {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using RebaseLibrary for Rebase;\\n    using BoringERC20 for IERC20;\\n\\n    event LogExchangeRate(uint256 rate);\\n    event LogAccrue(uint256 accruedAmount, uint256 feeFraction, uint64 rate, uint256 utilization);\\n    event LogAddCollateral(address indexed from, address indexed to, uint256 share);\\n    event LogAddAsset(address indexed from, address indexed to, uint256 share, uint256 fraction);\\n    event LogRemoveCollateral(address indexed from, address indexed to, uint256 share);\\n    event LogRemoveAsset(address indexed from, address indexed to, uint256 share, uint256 fraction);\\n    event LogBorrow(address indexed from, address indexed to, uint256 amount, uint256 feeAmount, uint256 part);\\n    event LogRepay(address indexed from, address indexed to, uint256 amount, uint256 part);\\n    event LogFeeTo(address indexed newFeeTo);\\n    event LogWithdrawFees(address indexed feeTo, uint256 feesEarnedFraction);\\n\\n    // Immutables (for MasterContract and all clones)\\n    IBentoBoxV1 public immutable bentoBox;\\n    KashiPairMediumRiskV1 public immutable masterContract;\\n\\n    // MasterContract variables\\n    address public feeTo;\\n    mapping(ISwapper => bool) public swappers;\\n\\n    // Per clone variables\\n    // Clone init settings\\n    IERC20 public collateral;\\n    IERC20 public asset;\\n    IOracle public oracle;\\n    bytes public oracleData;\\n\\n    // Total amounts\\n    uint256 public totalCollateralShare; // Total collateral supplied\\n    Rebase public totalAsset; // elastic = BentoBox shares held by the KashiPair, base = Total fractions held by asset suppliers\\n    Rebase public totalBorrow; // elastic = Total token amount to be repayed by borrowers, base = Total parts of the debt held by borrowers\\n\\n    // User balances\\n    mapping(address => uint256) public userCollateralShare;\\n    // userAssetFraction is called balanceOf for ERC20 compatibility (it's in ERC20.sol)\\n    mapping(address => uint256) public userBorrowPart;\\n\\n    /// @notice Exchange and interest rate tracking.\\n    /// This is 'cached' here because calls to Oracles can be very expensive.\\n    uint256 public exchangeRate;\\n\\n    struct AccrueInfo {\\n        uint64 interestPerSecond;\\n        uint64 lastAccrued;\\n        uint128 feesEarnedFraction;\\n    }\\n\\n    AccrueInfo public accrueInfo;\\n\\n    // ERC20 'variables'\\n    function symbol() external view returns (string memory) {\\n        return string(abi.encodePacked(\\\"bm\\\", collateral.safeSymbol(), \\\">\\\", asset.safeSymbol(), \\\"-\\\", oracle.symbol(oracleData)));\\n    }\\n\\n    function name() external view returns (string memory) {\\n        return string(abi.encodePacked(\\\"Kashi Med Risk \\\", collateral.safeName(), \\\">\\\", asset.safeName(), \\\"-\\\", oracle.symbol(oracleData)));\\n    }\\n\\n    function decimals() external view returns (uint8) {\\n        return asset.safeDecimals();\\n    }\\n\\n    // totalSupply for ERC20 compatibility\\n    function totalSupply() public view returns (uint256) {\\n        return totalAsset.base;\\n    }\\n\\n    // Settings for the Medium Risk KashiPair\\n    uint256 private constant CLOSED_COLLATERIZATION_RATE = 75000; // 75%\\n    uint256 private constant OPEN_COLLATERIZATION_RATE = 77000; // 77%\\n    uint256 private constant COLLATERIZATION_RATE_PRECISION = 1e5; // Must be less than EXCHANGE_RATE_PRECISION (due to optimization in math)\\n    uint256 private constant MINIMUM_TARGET_UTILIZATION = 7e17; // 70%\\n    uint256 private constant MAXIMUM_TARGET_UTILIZATION = 8e17; // 80%\\n    uint256 private constant UTILIZATION_PRECISION = 1e18;\\n    uint256 private constant FULL_UTILIZATION = 1e18;\\n    uint256 private constant FULL_UTILIZATION_MINUS_MAX = FULL_UTILIZATION - MAXIMUM_TARGET_UTILIZATION;\\n    uint256 private constant FACTOR_PRECISION = 1e18;\\n\\n    uint64 private constant STARTING_INTEREST_PER_SECOND = 68493150675; // approx 1% APR\\n    uint64 private constant MINIMUM_INTEREST_PER_SECOND = 17123287665; // approx 0.25% APR\\n    uint64 private constant MAXIMUM_INTEREST_PER_SECOND = 68493150675000; // approx 1000% APR\\n    uint256 private constant INTEREST_ELASTICITY = 28800e36; // Half or double in 28800 seconds (8 hours) if linear\\n\\n    uint256 private constant EXCHANGE_RATE_PRECISION = 1e18;\\n\\n    uint256 private constant LIQUIDATION_MULTIPLIER = 112000; // add 12%\\n    uint256 private constant LIQUIDATION_MULTIPLIER_PRECISION = 1e5;\\n\\n    // Fees\\n    uint256 private constant PROTOCOL_FEE = 10000; // 10%\\n    uint256 private constant PROTOCOL_FEE_DIVISOR = 1e5;\\n    uint256 private constant BORROW_OPENING_FEE = 50; // 0.05%\\n    uint256 private constant BORROW_OPENING_FEE_PRECISION = 1e5;\\n\\n    /// @notice The constructor is only used for the initial master contract. Subsequent clones are initialised via `init`.\\n    constructor(IBentoBoxV1 bentoBox_) public {\\n        bentoBox = bentoBox_;\\n        masterContract = this;\\n\\n        feeTo = msg.sender;\\n\\n        // Not really an issue, but https://blog.trailofbits.com/2020/12/16/breaking-aave-upgradeability/\\n        collateral = IERC20(address(1)); // Just a dummy value for the Master Contract\\n    }\\n\\n    /// @notice Serves as the constructor for clones, as clones can't have a regular constructor\\n    /// @dev `data` is abi encoded in the format: (IERC20 collateral, IERC20 asset, IOracle oracle, bytes oracleData)\\n    function init(bytes calldata data) public payable override {\\n        require(address(collateral) == address(0), \\\"KashiPair: already initialized\\\");\\n        (collateral, asset, oracle, oracleData) = abi.decode(data, (IERC20, IERC20, IOracle, bytes));\\n        require(address(collateral) != address(0), \\\"KashiPair: bad pair\\\");\\n\\n        accrueInfo.interestPerSecond = uint64(STARTING_INTEREST_PER_SECOND); // 1% APR, with 1e18 being 100%\\n    }\\n\\n    /// @notice Helper function to get the abi encoded bytes for the `init` function.\\n    function getInitData(\\n        IERC20 collateral_,\\n        IERC20 asset_,\\n        IOracle oracle_,\\n        bytes calldata oracleData_\\n    ) public pure returns (bytes memory data) {\\n        return abi.encode(collateral_, asset_, oracle_, oracleData_);\\n    }\\n\\n    /// @notice Accrues the interest on the borrowed tokens and handles the accumulation of fees.\\n    function accrue() public {\\n        AccrueInfo memory _accrueInfo = accrueInfo;\\n        // Number of seconds since accrue was called\\n        uint256 elapsedTime = block.timestamp - _accrueInfo.lastAccrued;\\n        if (elapsedTime == 0) {\\n            return;\\n        }\\n        _accrueInfo.lastAccrued = uint64(block.timestamp);\\n\\n        Rebase memory _totalBorrow = totalBorrow;\\n        if (_totalBorrow.base == 0) {\\n            // If there are no borrows, reset the interest rate\\n            if (_accrueInfo.interestPerSecond != STARTING_INTEREST_PER_SECOND) {\\n                _accrueInfo.interestPerSecond = STARTING_INTEREST_PER_SECOND;\\n                emit LogAccrue(0, 0, STARTING_INTEREST_PER_SECOND, 0);\\n            }\\n            accrueInfo = _accrueInfo;\\n            return;\\n        }\\n\\n        uint256 extraAmount = 0;\\n        uint256 feeFraction = 0;\\n        Rebase memory _totalAsset = totalAsset;\\n        uint256 fullAssetAmount = bentoBox.toAmount(asset, _totalAsset.elastic, false).add(_totalBorrow.elastic);\\n\\n        // Accrue interest\\n        extraAmount = uint256(_totalBorrow.elastic).mul(_accrueInfo.interestPerSecond).mul(elapsedTime) / 1e18;\\n        _totalBorrow.elastic = _totalBorrow.elastic.add(extraAmount.to128());\\n\\n        uint256 feeAmount = extraAmount.mul(PROTOCOL_FEE) / PROTOCOL_FEE_DIVISOR; // % of interest paid goes to fee\\n        feeFraction = feeAmount.mul(_totalAsset.base) / fullAssetAmount.sub(feeAmount);\\n        _accrueInfo.feesEarnedFraction = _accrueInfo.feesEarnedFraction.add(feeFraction.to128());\\n        totalAsset.base = _totalAsset.base.add(feeFraction.to128());\\n        totalBorrow = _totalBorrow;\\n\\n        // Update interest rate\\n        uint256 utilization = uint256(_totalBorrow.elastic).mul(UTILIZATION_PRECISION) / fullAssetAmount;\\n        if (utilization < MINIMUM_TARGET_UTILIZATION) {\\n            uint256 underFactor = MINIMUM_TARGET_UTILIZATION.sub(utilization).mul(FACTOR_PRECISION) / MINIMUM_TARGET_UTILIZATION;\\n            uint256 scale = INTEREST_ELASTICITY.add(underFactor.mul(underFactor).mul(elapsedTime));\\n            _accrueInfo.interestPerSecond = uint64(uint256(_accrueInfo.interestPerSecond).mul(INTEREST_ELASTICITY) / scale);\\n\\n            if (_accrueInfo.interestPerSecond < MINIMUM_INTEREST_PER_SECOND) {\\n                _accrueInfo.interestPerSecond = MINIMUM_INTEREST_PER_SECOND; // 0.25% APR minimum\\n            }\\n        } else if (utilization > MAXIMUM_TARGET_UTILIZATION) {\\n            uint256 overFactor = utilization.sub(MAXIMUM_TARGET_UTILIZATION).mul(FACTOR_PRECISION) / FULL_UTILIZATION_MINUS_MAX;\\n            uint256 scale = INTEREST_ELASTICITY.add(overFactor.mul(overFactor).mul(elapsedTime));\\n            _accrueInfo.interestPerSecond = uint64(uint256(_accrueInfo.interestPerSecond).mul(scale) / INTEREST_ELASTICITY);\\n\\n            if (_accrueInfo.interestPerSecond > MAXIMUM_INTEREST_PER_SECOND) {\\n                _accrueInfo.interestPerSecond = MAXIMUM_INTEREST_PER_SECOND; // 1000% APR maximum\\n            }\\n        }\\n\\n        emit LogAccrue(extraAmount, feeFraction, _accrueInfo.interestPerSecond, utilization);\\n        accrueInfo = _accrueInfo;\\n    }\\n\\n    /// @notice Concrete implementation of `isSolvent`. Includes a third parameter to allow caching `exchangeRate`.\\n    /// @param _exchangeRate The exchange rate. Used to cache the `exchangeRate` between calls.\\n    function _isSolvent(\\n        address user,\\n        bool open,\\n        uint256 _exchangeRate\\n    ) internal view returns (bool) {\\n        // accrue must have already been called!\\n        uint256 borrowPart = userBorrowPart[user];\\n        if (borrowPart == 0) return true;\\n        uint256 collateralShare = userCollateralShare[user];\\n        if (collateralShare == 0) return false;\\n\\n        Rebase memory _totalBorrow = totalBorrow;\\n\\n        return\\n            bentoBox.toAmount(\\n                collateral,\\n                collateralShare.mul(EXCHANGE_RATE_PRECISION / COLLATERIZATION_RATE_PRECISION).mul(\\n                    open ? OPEN_COLLATERIZATION_RATE : CLOSED_COLLATERIZATION_RATE\\n                ),\\n                false\\n            ) >=\\n            // Moved exchangeRate here instead of dividing the other side to preserve more precision\\n            borrowPart.mul(_totalBorrow.elastic).mul(_exchangeRate) / _totalBorrow.base;\\n    }\\n\\n    /// @notice Checks if the user is solvent.\\n    /// Has an option `open` to check if the user is solvent in an open/closed liquidation case.\\n    /// @param user The address of the user in question.\\n    /// @param open If True then the check is perfomed with `OPEN_COLLATERIZATION_RATE` else with `CLOSED_COLLATERIZATION_RATE`.\\n    /// @return (bool) User is solvent if True.\\n    function isSolvent(address user, bool open) public view returns (bool) {\\n        return _isSolvent(user, open, exchangeRate);\\n    }\\n\\n    /// @dev Checks if the user is solvent in the closed liquidation case at the end of the function body.\\n    modifier solvent() {\\n        _;\\n        require(_isSolvent(msg.sender, false, exchangeRate), \\\"KashiPair: user insolvent\\\");\\n    }\\n\\n    /// @notice Gets the exchange rate. I.e how much collateral to buy 1e18 asset.\\n    /// This function is supposed to be invoked if needed because Oracle queries can be expensive.\\n    /// @return updated True if `exchangeRate` was updated.\\n    /// @return rate The new exchange rate.\\n    function updateExchangeRate() public returns (bool updated, uint256 rate) {\\n        (updated, rate) = oracle.get(oracleData);\\n\\n        if (updated) {\\n            exchangeRate = rate;\\n            emit LogExchangeRate(rate);\\n        } else {\\n            // Return the old rate if fetching wasn't successful\\n            rate = exchangeRate;\\n        }\\n    }\\n\\n    /// @dev Helper function to move tokens.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount in shares to add.\\n    /// @param total Grand total amount to deduct from this contract's balance. Only applicable if `skim` is True.\\n    /// Only used for accounting checks.\\n    /// @param skim If True, only does a balance check on this contract.\\n    /// False if tokens from msg.sender in `bentoBox` should be transferred.\\n    function _addTokens(\\n        IERC20 token,\\n        uint256 share,\\n        uint256 total,\\n        bool skim\\n    ) internal {\\n        if (skim) {\\n            require(share <= bentoBox.balanceOf(token, address(this)).sub(total), \\\"KashiPair: Skim too much\\\");\\n        } else {\\n            bentoBox.transfer(token, msg.sender, address(this), share);\\n        }\\n    }\\n\\n    /// @notice Adds `collateral` from msg.sender to the account `to`.\\n    /// @param to The receiver of the tokens.\\n    /// @param skim True if the amount should be skimmed from the deposit balance of msg.sender.\\n    /// False if tokens from msg.sender in `bentoBox` should be transferred.\\n    /// @param share The amount of shares to add for `to`.\\n    function addCollateral(\\n        address to,\\n        bool skim,\\n        uint256 share\\n    ) public {\\n        userCollateralShare[to] = userCollateralShare[to].add(share);\\n        uint256 oldTotalCollateralShare = totalCollateralShare;\\n        totalCollateralShare = oldTotalCollateralShare.add(share);\\n        _addTokens(collateral, share, oldTotalCollateralShare, skim);\\n        emit LogAddCollateral(skim ? address(bentoBox) : msg.sender, to, share);\\n    }\\n\\n    /// @dev Concrete implementation of `removeCollateral`.\\n    function _removeCollateral(address to, uint256 share) internal {\\n        userCollateralShare[msg.sender] = userCollateralShare[msg.sender].sub(share);\\n        totalCollateralShare = totalCollateralShare.sub(share);\\n        emit LogRemoveCollateral(msg.sender, to, share);\\n        bentoBox.transfer(collateral, address(this), to, share);\\n    }\\n\\n    /// @notice Removes `share` amount of collateral and transfers it to `to`.\\n    /// @param to The receiver of the shares.\\n    /// @param share Amount of shares to remove.\\n    function removeCollateral(address to, uint256 share) public solvent {\\n        // accrue must be called because we check solvency\\n        accrue();\\n        _removeCollateral(to, share);\\n    }\\n\\n    /// @dev Concrete implementation of `addAsset`.\\n    function _addAsset(\\n        address to,\\n        bool skim,\\n        uint256 share\\n    ) internal returns (uint256 fraction) {\\n        Rebase memory _totalAsset = totalAsset;\\n        uint256 totalAssetShare = _totalAsset.elastic;\\n        uint256 allShare = _totalAsset.elastic + bentoBox.toShare(asset, totalBorrow.elastic, true);\\n        fraction = allShare == 0 ? share : share.mul(_totalAsset.base) / allShare;\\n        if (_totalAsset.base.add(fraction.to128()) < 1000) {\\n            return 0;\\n        }\\n        totalAsset = _totalAsset.add(share, fraction);\\n        balanceOf[to] = balanceOf[to].add(fraction);\\n        _addTokens(asset, share, totalAssetShare, skim);\\n        emit LogAddAsset(skim ? address(bentoBox) : msg.sender, to, share, fraction);\\n    }\\n\\n    /// @notice Adds assets to the lending pair.\\n    /// @param to The address of the user to receive the assets.\\n    /// @param skim True if the amount should be skimmed from the deposit balance of msg.sender.\\n    /// False if tokens from msg.sender in `bentoBox` should be transferred.\\n    /// @param share The amount of shares to add.\\n    /// @return fraction Total fractions added.\\n    function addAsset(\\n        address to,\\n        bool skim,\\n        uint256 share\\n    ) public returns (uint256 fraction) {\\n        accrue();\\n        fraction = _addAsset(to, skim, share);\\n    }\\n\\n    /// @dev Concrete implementation of `removeAsset`.\\n    function _removeAsset(address to, uint256 fraction) internal returns (uint256 share) {\\n        Rebase memory _totalAsset = totalAsset;\\n        uint256 allShare = _totalAsset.elastic + bentoBox.toShare(asset, totalBorrow.elastic, true);\\n        share = fraction.mul(allShare) / _totalAsset.base;\\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(fraction);\\n        _totalAsset.elastic = _totalAsset.elastic.sub(share.to128());\\n        _totalAsset.base = _totalAsset.base.sub(fraction.to128());\\n        require(_totalAsset.base >= 1000, \\\"Kashi: below minimum\\\");\\n        totalAsset = _totalAsset;\\n        emit LogRemoveAsset(msg.sender, to, share, fraction);\\n        bentoBox.transfer(asset, address(this), to, share);\\n    }\\n\\n    /// @notice Removes an asset from msg.sender and transfers it to `to`.\\n    /// @param to The user that receives the removed assets.\\n    /// @param fraction The amount/fraction of assets held to remove.\\n    /// @return share The amount of shares transferred to `to`.\\n    function removeAsset(address to, uint256 fraction) public returns (uint256 share) {\\n        accrue();\\n        share = _removeAsset(to, fraction);\\n    }\\n\\n    /// @dev Concrete implementation of `borrow`.\\n    function _borrow(address to, uint256 amount) internal returns (uint256 part, uint256 share) {\\n        uint256 feeAmount = amount.mul(BORROW_OPENING_FEE) / BORROW_OPENING_FEE_PRECISION; // A flat % fee is charged for any borrow\\n\\n        (totalBorrow, part) = totalBorrow.add(amount.add(feeAmount), true);\\n        userBorrowPart[msg.sender] = userBorrowPart[msg.sender].add(part);\\n        emit LogBorrow(msg.sender, to, amount, feeAmount, part);\\n\\n        share = bentoBox.toShare(asset, amount, false);\\n        Rebase memory _totalAsset = totalAsset;\\n        require(_totalAsset.base >= 1000, \\\"Kashi: below minimum\\\");\\n        _totalAsset.elastic = _totalAsset.elastic.sub(share.to128());\\n        totalAsset = _totalAsset;\\n        bentoBox.transfer(asset, address(this), to, share);\\n    }\\n\\n    /// @notice Sender borrows `amount` and transfers it to `to`.\\n    /// @return part Total part of the debt held by borrowers.\\n    /// @return share Total amount in shares borrowed.\\n    function borrow(address to, uint256 amount) public solvent returns (uint256 part, uint256 share) {\\n        accrue();\\n        (part, share) = _borrow(to, amount);\\n    }\\n\\n    /// @dev Concrete implementation of `repay`.\\n    function _repay(\\n        address to,\\n        bool skim,\\n        uint256 part\\n    ) internal returns (uint256 amount) {\\n        (totalBorrow, amount) = totalBorrow.sub(part, true);\\n        userBorrowPart[to] = userBorrowPart[to].sub(part);\\n\\n        uint256 share = bentoBox.toShare(asset, amount, true);\\n        uint128 totalShare = totalAsset.elastic;\\n        _addTokens(asset, share, uint256(totalShare), skim);\\n        totalAsset.elastic = totalShare.add(share.to128());\\n        emit LogRepay(skim ? address(bentoBox) : msg.sender, to, amount, part);\\n    }\\n\\n    /// @notice Repays a loan.\\n    /// @param to Address of the user this payment should go.\\n    /// @param skim True if the amount should be skimmed from the deposit balance of msg.sender.\\n    /// False if tokens from msg.sender in `bentoBox` should be transferred.\\n    /// @param part The amount to repay. See `userBorrowPart`.\\n    /// @return amount The total amount repayed.\\n    function repay(\\n        address to,\\n        bool skim,\\n        uint256 part\\n    ) public returns (uint256 amount) {\\n        accrue();\\n        amount = _repay(to, skim, part);\\n    }\\n\\n    // Functions that need accrue to be called\\n    uint8 internal constant ACTION_ADD_ASSET = 1;\\n    uint8 internal constant ACTION_REPAY = 2;\\n    uint8 internal constant ACTION_REMOVE_ASSET = 3;\\n    uint8 internal constant ACTION_REMOVE_COLLATERAL = 4;\\n    uint8 internal constant ACTION_BORROW = 5;\\n    uint8 internal constant ACTION_GET_REPAY_SHARE = 6;\\n    uint8 internal constant ACTION_GET_REPAY_PART = 7;\\n\\n    // Functions that don't need accrue to be called\\n    uint8 internal constant ACTION_ADD_COLLATERAL = 10;\\n    uint8 internal constant ACTION_UPDATE_EXCHANGE_RATE = 11;\\n\\n    // Function on BentoBox\\n    uint8 internal constant ACTION_BENTO_DEPOSIT = 20;\\n    uint8 internal constant ACTION_BENTO_WITHDRAW = 21;\\n    uint8 internal constant ACTION_BENTO_TRANSFER = 22;\\n    uint8 internal constant ACTION_BENTO_TRANSFER_MULTIPLE = 23;\\n    uint8 internal constant ACTION_BENTO_SETAPPROVAL = 24;\\n\\n    // Any external call (except to BentoBox)\\n    uint8 internal constant ACTION_CALL = 30;\\n\\n    int256 internal constant USE_VALUE1 = -1;\\n    int256 internal constant USE_VALUE2 = -2;\\n\\n    /// @dev Helper function for choosing the correct value (`value1` or `value2`) depending on `inNum`.\\n    function _num(\\n        int256 inNum,\\n        uint256 value1,\\n        uint256 value2\\n    ) internal pure returns (uint256 outNum) {\\n        if (inNum >= 0) {\\n            outNum = uint256(inNum);\\n        } else if (inNum == USE_VALUE1) {\\n            outNum = value1;\\n        } else if (inNum == USE_VALUE2) {\\n            outNum = value2;\\n        } else {\\n            revert(\\\"KashiPair: Num out of bounds\\\");\\n        }\\n    }\\n\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this can fail by itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @dev Helper function for depositing into `bentoBox`.\\n    function _bentoDeposit(\\n        bytes memory data,\\n        uint256 value,\\n        uint256 value1,\\n        uint256 value2\\n    ) internal returns (uint256, uint256) {\\n        (IERC20 token, address to, int256 amount, int256 share) = abi.decode(data, (IERC20, address, int256, int256));\\n        amount = int256(_num(amount, value1, value2)); // Done this way to avoid stack too deep errors\\n        share = int256(_num(share, value1, value2));\\n        return bentoBox.deposit{value: value}(token, msg.sender, to, uint256(amount), uint256(share));\\n    }\\n\\n    /// @dev Helper function to withdraw from the `bentoBox`.\\n    function _bentoWithdraw(\\n        bytes memory data,\\n        uint256 value1,\\n        uint256 value2\\n    ) internal returns (uint256, uint256) {\\n        (IERC20 token, address to, int256 amount, int256 share) = abi.decode(data, (IERC20, address, int256, int256));\\n        return bentoBox.withdraw(token, msg.sender, to, _num(amount, value1, value2), _num(share, value1, value2));\\n    }\\n\\n    /// @dev Helper function for conditional abi encoding based on inputs.\\n    function _callData(\\n        bytes memory callData,\\n        bool useValue1,\\n        bool useValue2,\\n        uint256 value1,\\n        uint256 value2\\n    ) internal pure returns (bytes memory callDataOut) {\\n        if (useValue1 && !useValue2) {\\n            callDataOut = abi.encodePacked(callData, value1);\\n        } else if (!useValue1 && useValue2) {\\n            callDataOut = abi.encodePacked(callData, value2);\\n        } else if (useValue1 && useValue2) {\\n            callDataOut = abi.encodePacked(callData, value1, value2);\\n        } else {\\n            callDataOut = callData;\\n        }\\n    }\\n\\n    /// @dev Helper function to perform a contract call and eventually extracting revert messages on failure.\\n    /// Calls to `bentoBox` are not allowed for obvious security reasons.\\n    /// This also means that calls made from this contract shall *not* be trusted.\\n    /// @param value Amount of ETH to transfer.\\n    /// @param callee The address to call. Calling `bentoBox` is not allowed.\\n    /// @return (bytes) the data that the call returned.\\n    function _call(\\n        uint256 value,\\n        address callee,\\n        bytes memory callData\\n    ) internal returns (bytes memory) {\\n        require(callee != address(bentoBox) && callee != address(this), \\\"KashiPair: can't call\\\");\\n\\n        (bool success, bytes memory returnData) = callee.call{value: value}(callData);\\n        require(success, _getRevertMsg(returnData));\\n        return returnData;\\n    }\\n\\n    struct CookStatus {\\n        bool needsSolvencyCheck;\\n        bool hasAccrued;\\n    }\\n\\n    /// @notice Executes a set of actions and allows composability (contract calls) to other contracts.\\n    /// @param actions An array with a sequence of actions to execute (see ACTION_ declarations).\\n    /// @param values A one-to-one mapped array to `actions`. ETH amounts to send along with the actions.\\n    /// Only applicable to `ACTION_CALL`, `ACTION_BENTO_DEPOSIT`.\\n    /// @param datas A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\\n    /// @return value1 May contain the first positioned return value of the last executed action (if applicable).\\n    /// @return value2 May contain the second positioned return value of the last executed action which returns 2 values (if applicable).\\n    function cook(\\n        uint8[] calldata actions,\\n        uint256[] calldata values,\\n        bytes[] calldata datas\\n    ) external payable returns (uint256 value1, uint256 value2) {\\n        CookStatus memory status;\\n        for (uint256 i = 0; i < actions.length; i++) {\\n            uint8 action = actions[i];\\n            if (!status.hasAccrued && action < 10) {\\n                accrue();\\n                status.hasAccrued = true;\\n            }\\n            if (action == ACTION_ADD_COLLATERAL) {\\n                (int256 share, address to, bool skim) = abi.decode(datas[i], (int256, address, bool));\\n                addCollateral(to, skim, _num(share, value1, value2));\\n            } else if (action == ACTION_ADD_ASSET) {\\n                (int256 share, address to, bool skim) = abi.decode(datas[i], (int256, address, bool));\\n                value1 = _addAsset(to, skim, _num(share, value1, value2));\\n            } else if (action == ACTION_REPAY) {\\n                (int256 part, address to, bool skim) = abi.decode(datas[i], (int256, address, bool));\\n                _repay(to, skim, _num(part, value1, value2));\\n            } else if (action == ACTION_REMOVE_ASSET) {\\n                (int256 fraction, address to) = abi.decode(datas[i], (int256, address));\\n                value1 = _removeAsset(to, _num(fraction, value1, value2));\\n            } else if (action == ACTION_REMOVE_COLLATERAL) {\\n                (int256 share, address to) = abi.decode(datas[i], (int256, address));\\n                _removeCollateral(to, _num(share, value1, value2));\\n                status.needsSolvencyCheck = true;\\n            } else if (action == ACTION_BORROW) {\\n                (int256 amount, address to) = abi.decode(datas[i], (int256, address));\\n                (value1, value2) = _borrow(to, _num(amount, value1, value2));\\n                status.needsSolvencyCheck = true;\\n            } else if (action == ACTION_UPDATE_EXCHANGE_RATE) {\\n                (bool must_update, uint256 minRate, uint256 maxRate) = abi.decode(datas[i], (bool, uint256, uint256));\\n                (bool updated, uint256 rate) = updateExchangeRate();\\n                require((!must_update || updated) && rate > minRate && (maxRate == 0 || rate > maxRate), \\\"KashiPair: rate not ok\\\");\\n            } else if (action == ACTION_BENTO_SETAPPROVAL) {\\n                (address user, address _masterContract, bool approved, uint8 v, bytes32 r, bytes32 s) =\\n                    abi.decode(datas[i], (address, address, bool, uint8, bytes32, bytes32));\\n                bentoBox.setMasterContractApproval(user, _masterContract, approved, v, r, s);\\n            } else if (action == ACTION_BENTO_DEPOSIT) {\\n                (value1, value2) = _bentoDeposit(datas[i], values[i], value1, value2);\\n            } else if (action == ACTION_BENTO_WITHDRAW) {\\n                (value1, value2) = _bentoWithdraw(datas[i], value1, value2);\\n            } else if (action == ACTION_BENTO_TRANSFER) {\\n                (IERC20 token, address to, int256 share) = abi.decode(datas[i], (IERC20, address, int256));\\n                bentoBox.transfer(token, msg.sender, to, _num(share, value1, value2));\\n            } else if (action == ACTION_BENTO_TRANSFER_MULTIPLE) {\\n                (IERC20 token, address[] memory tos, uint256[] memory shares) = abi.decode(datas[i], (IERC20, address[], uint256[]));\\n                bentoBox.transferMultiple(token, msg.sender, tos, shares);\\n            } else if (action == ACTION_CALL) {\\n                (address callee, bytes memory callData, bool useValue1, bool useValue2, uint8 returnValues) =\\n                    abi.decode(datas[i], (address, bytes, bool, bool, uint8));\\n                callData = _callData(callData, useValue1, useValue2, value1, value2);\\n                bytes memory returnData = _call(values[i], callee, callData);\\n\\n                if (returnValues == 1) {\\n                    (value1) = abi.decode(returnData, (uint256));\\n                } else if (returnValues == 2) {\\n                    (value1, value2) = abi.decode(returnData, (uint256, uint256));\\n                }\\n            } else if (action == ACTION_GET_REPAY_SHARE) {\\n                int256 part = abi.decode(datas[i], (int256));\\n                value1 = bentoBox.toShare(asset, totalBorrow.toElastic(_num(part, value1, value2), true), true);\\n            } else if (action == ACTION_GET_REPAY_PART) {\\n                int256 amount = abi.decode(datas[i], (int256));\\n                value1 = totalBorrow.toBase(_num(amount, value1, value2), false);\\n            }\\n        }\\n\\n        if (status.needsSolvencyCheck) {\\n            require(_isSolvent(msg.sender, false, exchangeRate), \\\"KashiPair: user insolvent\\\");\\n        }\\n    }\\n\\n    /// @notice Handles the liquidation of users' balances, once the users' amount of collateral is too low.\\n    /// @param users An array of user addresses.\\n    /// @param borrowParts A one-to-one mapping to `users`, contains partial borrow amounts (to liquidate) of the respective user.\\n    /// @param to Address of the receiver in open liquidations if `swapper` is zero.\\n    /// @param swapper Contract address of the `ISwapper` implementation. Swappers are restricted for closed liquidations. See `setSwapper`.\\n    /// @param open True to perform a open liquidation else False.\\n    function liquidate(\\n        address[] calldata users,\\n        uint256[] calldata borrowParts,\\n        address to,\\n        ISwapper swapper,\\n        bool open\\n    ) public {\\n        // Oracle can fail but we still need to allow liquidations\\n        (, uint256 _exchangeRate) = updateExchangeRate();\\n        accrue();\\n\\n        uint256 allCollateralShare;\\n        uint256 allBorrowAmount;\\n        uint256 allBorrowPart;\\n        Rebase memory _totalBorrow = totalBorrow;\\n        uint256 len = users.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address user = users[i];\\n            if (!_isSolvent(user, open, _exchangeRate)) {\\n                uint256 borrowPart = borrowParts[i];\\n                uint256 borrowAmount = _totalBorrow.toElastic(borrowPart, false);\\n                uint256 collateralShare =\\n                    bentoBox.toShare(\\n                        collateral,\\n                        borrowAmount.mul(LIQUIDATION_MULTIPLIER).mul(_exchangeRate) /\\n                            (LIQUIDATION_MULTIPLIER_PRECISION * EXCHANGE_RATE_PRECISION),\\n                        false\\n                    );\\n\\n                userCollateralShare[user] = userCollateralShare[user].sub(collateralShare);\\n                userBorrowPart[user] = userBorrowPart[user].sub(borrowPart);\\n                emit LogRemoveCollateral(user, swapper == ISwapper(0) ? to : address(swapper), collateralShare);\\n                emit LogRepay(swapper == ISwapper(0) ? msg.sender : address(swapper), user, borrowAmount, borrowPart);\\n\\n                // Keep totals\\n                allCollateralShare = allCollateralShare.add(collateralShare);\\n                allBorrowAmount = allBorrowAmount.add(borrowAmount);\\n                allBorrowPart = allBorrowPart.add(borrowPart);\\n            }\\n        }\\n        require(allBorrowAmount != 0, \\\"KashiPair: all are solvent\\\");\\n        _totalBorrow.elastic = _totalBorrow.elastic.sub(allBorrowAmount.to128());\\n        _totalBorrow.base = _totalBorrow.base.sub(allBorrowPart.to128());\\n        totalBorrow = _totalBorrow;\\n        totalCollateralShare = totalCollateralShare.sub(allCollateralShare);\\n\\n        uint256 allBorrowShare = bentoBox.toShare(asset, allBorrowAmount, true);\\n\\n        if (!open) {\\n            // Closed liquidation using a pre-approved swapper for the benefit of the LPs\\n            require(masterContract.swappers(swapper), \\\"KashiPair: Invalid swapper\\\");\\n\\n            // Swaps the users' collateral for the borrowed asset\\n            bentoBox.transfer(collateral, address(this), address(swapper), allCollateralShare);\\n            swapper.swap(collateral, asset, address(this), allBorrowShare, allCollateralShare);\\n\\n            uint256 returnedShare = bentoBox.balanceOf(asset, address(this)).sub(uint256(totalAsset.elastic));\\n            uint256 extraShare = returnedShare.sub(allBorrowShare);\\n            uint256 feeShare = extraShare.mul(PROTOCOL_FEE) / PROTOCOL_FEE_DIVISOR; // % of profit goes to fee\\n            // solhint-disable-next-line reentrancy\\n            bentoBox.transfer(asset, address(this), masterContract.feeTo(), feeShare);\\n            totalAsset.elastic = totalAsset.elastic.add(returnedShare.sub(feeShare).to128());\\n            emit LogAddAsset(address(swapper), address(this), extraShare.sub(feeShare), 0);\\n        } else {\\n            // Swap using a swapper freely chosen by the caller\\n            // Open (flash) liquidation: get proceeds first and provide the borrow after\\n            bentoBox.transfer(collateral, address(this), swapper == ISwapper(0) ? to : address(swapper), allCollateralShare);\\n            if (swapper != ISwapper(0)) {\\n                swapper.swap(collateral, asset, msg.sender, allBorrowShare, allCollateralShare);\\n            }\\n\\n            bentoBox.transfer(asset, msg.sender, address(this), allBorrowShare);\\n            totalAsset.elastic = totalAsset.elastic.add(allBorrowShare.to128());\\n        }\\n    }\\n\\n    /// @notice Withdraws the fees accumulated.\\n    function withdrawFees() public {\\n        accrue();\\n        address _feeTo = masterContract.feeTo();\\n        uint256 _feesEarnedFraction = accrueInfo.feesEarnedFraction;\\n        balanceOf[_feeTo] = balanceOf[_feeTo].add(_feesEarnedFraction);\\n        accrueInfo.feesEarnedFraction = 0;\\n\\n        emit LogWithdrawFees(_feeTo, _feesEarnedFraction);\\n    }\\n\\n    /// @notice Used to register and enable or disable swapper contracts used in closed liquidations.\\n    /// MasterContract Only Admin function.\\n    /// @param swapper The address of the swapper contract that conforms to `ISwapper`.\\n    /// @param enable True to enable the swapper. To disable use False.\\n    function setSwapper(ISwapper swapper, bool enable) public onlyOwner {\\n        swappers[swapper] = enable;\\n    }\\n\\n    /// @notice Sets the beneficiary of fees accrued in liquidations.\\n    /// MasterContract Only Admin function.\\n    /// @param newFeeTo The address of the receiver.\\n    function setFeeTo(address newFeeTo) public onlyOwner {\\n        feeTo = newFeeTo;\\n        emit LogFeeTo(newFeeTo);\\n    }\\n}\\n\",\"keccak256\":\"0x1475b8776398635560e04e7cee40d1c29e07149d101886d0e49fd35fefdbd417\",\"license\":\"UNLICENSED\"}},\"version\":1}",
    "bytecode": "0x6101006040523480156200001257600080fd5b50604051620061c3380380620061c383398101604081905262000035916200011f565b4660a08190526200004681620000c9565b60805250600380546001600160a01b031916339081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36001600160601b0319606091821b1660c05230901b60e052600580546001600160a01b031990811633179091556007805490911660011790556200016e565b60007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218823060405160200162000102939291906200014f565b604051602081830303815290604052805190602001209050919050565b60006020828403121562000131578081fd5b81516001600160a01b038116811462000148578182fd5b9392505050565b92835260208301919091526001600160a01b0316604082015260600190565b60805160a05160c05160601c60e05160601c615f7e6200024560003980610e185280611f69528061225952806129495250806114a3528061166b528061174352806118ae5280611a535280611bda5280611ec052806120245280612154528061221352806123ed528061253652806126a95280612d905280613375528061347d528061353f52806136f752806137b752806139885280613c025280613d515280613e7a528061402952806140df52806141bb5280614312528061461052806146975250806149215250806149565250615f7e6000f3fe6080604052600436106102fd5760003560e01c80636b2ace871161018f5780638da5cb5b116100e1578063d8dfeb451161008a578063f46901ed11610064578063f46901ed146107f1578063f8ba4cff14610811578063f9557ccb14610826576102fd565b8063d8dfeb45146107a7578063dd62ed3e146107bc578063e30c3978146107dc576102fd565b8063b27c0e74116100bb578063b27c0e741461074e578063cd446e2214610772578063d505accf14610787576102fd565b80638da5cb5b1461070457806395d89b4114610719578063a9059cbb1461072e576102fd565b80637dc0d1d011610143578063860ffea11161011d578063860ffea1146106a4578063876467f8146106c45780638cad7fbe146106e4576102fd565b80637dc0d1d01461064c5780637ecebe00146106615780638285ef4014610681576102fd565b806374645ff31161017457806374645ff3146105f757806376ee101b1461060c5780637739d59d1461062c576102fd565b80636b2ace87146105c257806370a08231146105d7576102fd565b8063247fd03c11610253578063476343ee116101fc5780634ddf47d4116101d65780634ddf47d4146105875780634e71e0c81461059a578063656f3d64146105af576102fd565b8063476343ee1461052457806348e4163e146105395780634b8a352914610559576102fd565b80633ba0b9a91161022d5780633ba0b9a9146104da5780633f2617cb146104ef578063473e3ce71461050f576102fd565b8063247fd03c14610483578063313ce567146104a357806338d52e0f146104c5576102fd565b806315294c40116102b55780631c9e379b1161028f5780631c9e379b146104235780632317ef671461044357806323b872dd14610463576102fd565b806315294c40146103c157806318160ddd146103ee5780631b51e94014610403576102fd565b806306fdde03116102e657806306fdde0314610350578063078dfbe714610372578063095ea7b314610394576102fd565b8063017e7e581461030257806302ce728f1461032d575b600080fd5b34801561030e57600080fd5b5061031761083b565b604051610324919061556d565b60405180910390f35b34801561033957600080fd5b5061034261084a565b6040516103249291906155c5565b34801561035c57600080fd5b50610365610927565b6040516103249190615646565b34801561037e57600080fd5b5061039261038d366004614e04565b6109ff565b005b3480156103a057600080fd5b506103b46103af366004614e7d565b610aef565b60405161032491906155ba565b3480156103cd57600080fd5b506103e16103dc366004614e4e565b610b5a565b6040516103249190615dc3565b3480156103fa57600080fd5b506103e1610b77565b34801561040f57600080fd5b506103e161041e366004614e4e565b610b8d565b34801561042f57600080fd5b506103e161043e366004614bc2565b610ba2565b34801561044f57600080fd5b506103e161045e366004614e7d565b610bb4565b34801561046f57600080fd5b506103b461047e366004614d27565b610bcf565b34801561048f57600080fd5b5061036561049e3660046151bb565b610d49565b3480156104af57600080fd5b506104b8610d7f565b6040516103249190615e1d565b3480156104d157600080fd5b50610317610d9c565b3480156104e657600080fd5b506103e1610dab565b3480156104fb57600080fd5b5061039261050a366004614dd7565b610db1565b34801561051b57600080fd5b506103e1610e06565b34801561053057600080fd5b50610392610e0c565b34801561054557600080fd5b506103e1610554366004614bc2565b610f49565b34801561056557600080fd5b50610579610574366004614e7d565b610f5b565b604051610324929190615dcc565b610392610595366004615061565b610fa9565b3480156105a657600080fd5b5061039261108d565b6105796105bd366004614f4e565b61111b565b3480156105ce57600080fd5b50610317611a51565b3480156105e357600080fd5b506103e16105f2366004614bc2565b611a75565b34801561060357600080fd5b50610365611a87565b34801561061857600080fd5b50610392610627366004614ea8565b611b15565b34801561063857600080fd5b506103b4610647366004614dd7565b6125e4565b34801561065857600080fd5b506103176125f3565b34801561066d57600080fd5b506103e161067c366004614bc2565b612602565b34801561068d57600080fd5b50610696612614565b604051610324929190615da9565b3480156106b057600080fd5b506103926106bf366004614e4e565b61262e565b3480156106d057600080fd5b506103926106df366004614e7d565b61270f565b3480156106f057600080fd5b506103b46106ff366004614bc2565b61274f565b34801561071057600080fd5b50610317612764565b34801561072557600080fd5b50610365612773565b34801561073a57600080fd5b506103b4610749366004614e7d565b612837565b34801561075a57600080fd5b50610763612914565b60405161032493929190615df0565b34801561077e57600080fd5b50610317612947565b34801561079357600080fd5b506103926107a2366004614d67565b61296b565b3480156107b357600080fd5b50610317612b0c565b3480156107c857600080fd5b506103e16107d7366004614cef565b612b1b565b3480156107e857600080fd5b50610317612b38565b3480156107fd57600080fd5b5061039261080c366004614bc2565b612b47565b34801561081d57600080fd5b50610392612bbb565b34801561083257600080fd5b506106966131b8565b6005546001600160a01b031681565b60095460405163d6d7d52560e01b815260009182916001600160a01b039091169063d6d7d5259061088090600a90600401615659565b6040805180830381600087803b15801561089957600080fd5b505af11580156108ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d19190615000565b9092509050811561091e5760108190556040517f9f9192b5edb17356c524e08d9e025c8e2f6307e6ea52fb7968faa3081f51c3c890610911908390615dc3565b60405180910390a1610923565b506010545b9091565b60075460609061093f906001600160a01b03166131d2565b600854610954906001600160a01b03166131d2565b60095460405163634ce26b60e11b81526001600160a01b039091169063c699c4d69061098590600a90600401615659565b60006040518083038186803b15801561099d57600080fd5b505afa1580156109b1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109d9919081019061530a565b6040516020016109eb93929190615478565b604051602081830303815290604052905090565b6003546001600160a01b03163314610a325760405162461bcd60e51b8152600401610a2990615b87565b60405180910390fd5b8115610ace576001600160a01b038316151580610a4c5750805b610a685760405162461bcd60e51b8152600401610a2990615998565b6003546040516001600160a01b038086169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b0385166001600160a01b031991821617909155600480549091169055610aea565b600480546001600160a01b0319166001600160a01b0385161790555b505050565b3360008181526001602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610b48908690615dc3565b60405180910390a35060015b92915050565b6000610b64612bbb565b610b6f8484846132af565b949350505050565b600c54600160801b90046001600160801b031690565b6000610b97612bbb565b610b6f8484846134e8565b600e6020526000908152604090205481565b6000610bbe612bbb565b610bc88383613763565b9392505050565b60008115610cf4576001600160a01b03841660009081526020819052604090205482811015610c105760405162461bcd60e51b8152600401610a2990615c5f565b836001600160a01b0316856001600160a01b031614610cf2576001600160a01b03851660009081526001602090815260408083203384529091529020546000198114610c9f5783811015610c765760405162461bcd60e51b8152600401610a2990615aab565b6001600160a01b0386166000908152600160209081526040808320338452909152902084820390555b6001600160a01b038516610cc55760405162461bcd60e51b8152600401610a299061592a565b506001600160a01b0380861660009081526020819052604080822086850390559186168152208054840190555b505b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d379190615dc3565b60405180910390a35060019392505050565b60608585858585604051602001610d649594939291906157f5565b60405160208183030381529060405290505b95945050505050565b600854600090610d97906001600160a01b0316613a01565b905090565b6008546001600160a01b031681565b60105481565b6003546001600160a01b03163314610ddb5760405162461bcd60e51b8152600401610a2990615b87565b6001600160a01b03919091166000908152600660205260409020805460ff1916911515919091179055565b600b5481565b610e14612bbb565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6f57600080fd5b505afa158015610e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea79190614bde565b6011546001600160a01b038216600090815260208190526040902054919250600160801b90046001600160801b031690610ee19082613aba565b6001600160a01b0383166000818152602081905260409081902092909255601180546001600160801b0316905590517fbe641c3ffc44b2d6c184f023fa4ed7bda4b6ffa71e03b3c98ae0c776da1f17e790610f3d908490615dc3565b60405180910390a25050565b600f6020526000908152604090205481565b600080610f66612bbb565b610f708484613add565b8092508193505050610f86336000601054613dcb565b610fa25760405162461bcd60e51b8152600401610a2990615b50565b9250929050565b6007546001600160a01b031615610fd25760405162461bcd60e51b8152600401610a29906158f3565b610fde81830183615235565b80516007906000906008908290600990829061100190600a9060208a01906149b3565b5081546001600160a01b0398891661010092830a908102908a021990911617909155825497871691810a918202918702199097161790558154958416940a938402938302199094169290921790925550600754166110715760405162461bcd60e51b8152600401610a2990615a3d565b50506011805467ffffffffffffffff1916640ff28289d3179055565b6004546001600160a01b03163381146110b85760405162461bcd60e51b8152600401610a2990615bbc565b6003546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b039092166001600160a01b0319928316179055600480549091169055565b600080611126614a2d565b60005b88811015611a135760008a8a8381811061113f57fe5b905060200201602081019061115491906153af565b9050826020015115801561116b5750600a8160ff16105b1561118057611178612bbb565b600160208401525b60ff8116600a14156111da57600080600089898681811061119d57fe5b90506020028101906111af9190615e2b565b8101906111bc91906152e4565b9250925092506111d282826106bf868c8c613f46565b505050611a0a565b60ff81166001141561123b5760008060008989868181106111f757fe5b90506020028101906112099190615e2b565b81019061121691906152e4565b925092509250611231828261122c868c8c613f46565b6134e8565b9750505050611a0a565b60ff81166002141561129b57600080600089898681811061125857fe5b905060200281019061126a9190615e2b565b81019061127791906152e4565b925092509250611292828261128d868c8c613f46565b6132af565b50505050611a0a565b60ff8116600314156112f6576000808888858181106112b657fe5b90506020028101906112c89190615e2b565b8101906112d591906152c0565b915091506112ed816112e8848a8a613f46565b613763565b96505050611a0a565b60ff8116600414156113535760008088888581811061131157fe5b90506020028101906113239190615e2b565b81019061133091906152c0565b9150915061134881611343848a8a613f46565b613f90565b505060018352611a0a565b60ff8116600514156113b65760008088888581811061136e57fe5b90506020028101906113809190615e2b565b81019061138d91906152c0565b915091506113a5816113a0848a8a613f46565b613add565b600187529097509550611a0a915050565b60ff8116600b14156114555760008060008989868181106113d357fe5b90506020028101906113e59190615e2b565b8101906113f2919061502d565b92509250925060008061140361084a565b915091508415806114115750815b801561141c57508381115b801561142f575082158061142f57508281115b61144b5760405162461bcd60e51b8152600401610a2990615d3b565b5050505050611a0a565b60ff811660181415611534576000806000806000808c8c8981811061147657fe5b90506020028101906114889190615e2b565b8101906114959190614bfa565b9550955095509550955095507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c0a47c938787878787876040518763ffffffff1660e01b81526004016114f796959493929190615581565b600060405180830381600087803b15801561151157600080fd5b505af1158015611525573d6000803e3d6000fd5b50505050505050505050611a0a565b60ff8116601414156115bc576115b287878481811061154f57fe5b90506020028101906115619190615e2b565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d92508c91508690508181106115a457fe5b90506020020135878761409e565b9095509350611a0a565b60ff811660151415611627576115b28787848181106115d757fe5b90506020028101906115e99190615e2b565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508992508891506141949050565b60ff8116601614156116ff57600080600089898681811061164457fe5b90506020028101906116569190615e2b565b8101906116639190614d27565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f18d03cc8433856116a6868e8e613f46565b6040518563ffffffff1660e01b81526004016116c594939291906156fd565b600060405180830381600087803b1580156116df57600080fd5b505af11580156116f3573d6000803e3d6000fd5b50505050505050611a0a565b60ff81166017141561179357600060608089898681811061171c57fe5b905060200281019061172e9190615e2b565b81019061173b91906150e8565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630fca8843843385856040518563ffffffff1660e01b81526004016116c5949392919061575b565b60ff8116601e1415611865576000606060008060008b8b888181106117b457fe5b90506020028101906117c69190615e2b565b8101906117d39190614c67565b945094509450945094506117ea8484848d8d614282565b9350606061180b8f8f8a8181106117fd57fe5b90506020020135878761430e565b90508160ff1660011415611834578080602001905181019061182d9190615374565b9a5061185a565b8160ff166002141561185a5780806020019051810190611854919061538c565b909b5099505b505050505050611a0a565b60ff81166006141561198d57600087878481811061187f57fe5b90506020028101906118919190615e2b565b81019061189e91906152a8565b6008549091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169163da5139ca91166119156118e5858b8b613f46565b60408051808201909152600d546001600160801b038082168352600160801b90910416602082015290600161440d565b60016040518463ffffffff1660e01b815260040161193593929190615874565b60206040518083038186803b15801561194d57600080fd5b505afa158015611961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119859190615374565b955050611a0a565b60ff811660071415611a0a5760008787848181106119a757fe5b90506020028101906119b99190615e2b565b8101906119c691906152a8565b9050611a066119d6828888613f46565b60408051808201909152600d546001600160801b038082168352600160801b9091041660208201529060006144a6565b9550505b50600101611129565b50805115611a4557611a29336000601054613dcb565b611a455760405162461bcd60e51b8152600401610a2990615b50565b50965096945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006020819052908152604090205481565b600a805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015611b0d5780601f10611ae257610100808354040283529160200191611b0d565b820191906000526020600020905b815481529060010190602001808311611af057829003601f168201915b505050505081565b6000611b1f61084a565b915050611b2a612bbb565b6000806000611b37614a2d565b5060408051808201909152600d546001600160801b038082168352600160801b9091041660208201528a60005b81811015611df65760008e8e83818110611b7a57fe5b9050602002016020810190611b8f9190614bc2565b9050611b9c818a8a613dcb565b611ded5760008d8d84818110611bae57fe5b6020029190910135915060009050611bc786838361440d565b6007549091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169163da5139ca911669152d02c7e14af6800000611c258f611c1f886201b58061451f565b9061451f565b81611c2c57fe5b0460006040518463ffffffff1660e01b8152600401611c4d93929190615874565b60206040518083038186803b158015611c6557600080fd5b505afa158015611c79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9d9190615374565b6001600160a01b0385166000908152600e6020526040902054909150611cc39082614556565b6001600160a01b0385166000908152600e6020908152604080832093909355600f90522054611cf29084614556565b6001600160a01b038086166000908152600f60205260409020919091558d1615611d1c578c611d1e565b8d5b6001600160a01b0316846001600160a01b03167f8ad4d3ff00da092c7ad9a573ea4f5f6a3dffc6712dc06d3f78f49b862297c40283604051611d609190615dc3565b60405180910390a36001600160a01b03808516908e1615611d81578d611d83565b335b6001600160a01b03167fc8e512d8f188ca059984b5853d2bf653da902696b8512785b182b2c813789a6e8486604051611dbd929190615dcc565b60405180910390a3611dcf8a82613aba565b9950611ddb8983613aba565b9850611de78884613aba565b97505050505b50600101611b64565b5083611e145760405162461bcd60e51b8152600401610a2990615961565b611e31611e2085614579565b83516001600160801b0316906145a6565b6001600160801b03168252611e5c611e4884614579565b60208401516001600160801b0316906145a6565b6001600160801b03908116602084018190528351600d80546001600160801b03191691841691909117909216600160801b909102179055600b54611ea09086614556565b600b55600854604051636d289ce560e11b81526000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263da5139ca92611efb9216908990600190600401615874565b60206040518083038186803b158015611f1357600080fd5b505afa158015611f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4b9190615374565b9050876123e057604051634656bfdf60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638cad7fbe90611f9e908c9060040161556d565b60206040518083038186803b158015611fb657600080fd5b505afa158015611fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fee9190614fe4565b61200a5760405162461bcd60e51b8152600401610a2990615ccd565b600754604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc9261206392919091169030908e908c906004016156fd565b600060405180830381600087803b15801561207d57600080fd5b505af1158015612091573d6000803e3d6000fd5b50506007546008546040516371a1ff0960e11b81526001600160a01b03808f16955063e343fe1294506120d1938116921690309087908d90600401615727565b6040805180830381600087803b1580156120ea57600080fd5b505af11580156120fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612122919061538c565b5050600c54600854604051633de222bb60e21b81526000926121e5926001600160801b03909116916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f7888aec9261218f92919091169030906004016156e3565b60206040518083038186803b1580156121a757600080fd5b505afa1580156121bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121df9190615374565b90614556565b905060006121f38284614556565b90506000620186a06122078361271061451f565b8161220e57fe5b0490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f18d03cc600860009054906101000a90046001600160a01b0316307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b1580156122b057600080fd5b505afa1580156122c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e89190614bde565b856040518563ffffffff1660e01b815260040161230894939291906156fd565b600060405180830381600087803b15801561232257600080fd5b505af1158015612336573d6000803e3d6000fd5b5050505061236a612358612353838661455690919063ffffffff16565b614579565b600c546001600160801b0316906145d5565b600c80546001600160801b0319166001600160801b0392909216919091179055306001600160a01b038d167f30a8c4f9ab5af7e1309ca87c32377d1a83366c5990472dbf9d262450eae14e386123c08585614556565b60006040516123d0929190615dcc565b60405180910390a35050506125d4565b6007546001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169163f18d03cc919081169030908d1615612428578c61242a565b8d5b8a6040518563ffffffff1660e01b815260040161244a94939291906156fd565b600060405180830381600087803b15801561246457600080fd5b505af1158015612478573d6000803e3d6000fd5b505050506001600160a01b0389161561251c576007546008546040516371a1ff0960e11b81526001600160a01b03808d169363e343fe12936124c893918316921690339087908d90600401615727565b6040805180830381600087803b1580156124e157600080fd5b505af11580156124f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612519919061538c565b50505b600854604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc926125759291909116903390309087906004016156fd565b600060405180830381600087803b15801561258f57600080fd5b505af11580156125a3573d6000803e3d6000fd5b505050506125b361235882614579565b600c80546001600160801b0319166001600160801b03929092169190911790555b5050505050505050505050505050565b6000610bc88383601054613dcb565b6009546001600160a01b031681565b60026020526000908152604090205481565b600d546001600160801b0380821691600160801b90041682565b6001600160a01b0383166000908152600e60205260409020546126519082613aba565b6001600160a01b0384166000908152600e6020526040902055600b546126778183613aba565b600b55600754612692906001600160a01b0316838386614604565b836001600160a01b0316836126a757336126c9565b7f00000000000000000000000000000000000000000000000000000000000000005b6001600160a01b03167f9ed03113de523cebfe5e49d5f8e12894b1c0d42ce805990461726444c90eab87846040516127019190615dc3565b60405180910390a350505050565b612717612bbb565b6127218282613f90565b61272f336000601054613dcb565b61274b5760405162461bcd60e51b8152600401610a2990615b50565b5050565b60066020526000908152604090205460ff1681565b6003546001600160a01b031681565b60075460609061278b906001600160a01b031661470b565b6008546127a0906001600160a01b031661470b565b60095460405163634ce26b60e11b81526001600160a01b039091169063c699c4d6906127d190600a90600401615659565b60006040518083038186803b1580156127e957600080fd5b505afa1580156127fd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612825919081019061530a565b6040516020016109eb93929190615500565b600081156128d157336000908152602081905260409020548281101561286f5760405162461bcd60e51b8152600401610a2990615c5f565b336001600160a01b038516146128cf576001600160a01b0384166128a55760405162461bcd60e51b8152600401610a299061592a565b3360009081526020819052604080822085840390556001600160a01b038616825290208054840190555b505b826001600160a01b0316336001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b489190615dc3565b60115467ffffffffffffffff8082169168010000000000000000810490911690600160801b90046001600160801b031683565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b0387166129915760405162461bcd60e51b8152600401610a2990615bf1565b8342106129b05760405162461bcd60e51b8152600401610a2990615b19565b6001600160a01b0387166000818152600260209081526040918290208054600181810190925592519092612a2e92612a13927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928e928e928e92918e91016155d5565b60405160208183030381529060405280519060200120614752565b85858560405160008152602001604052604051612a4e9493929190615628565b6020604051602081039080840390855afa158015612a70573d6000803e3d6000fd5b505050602060405103516001600160a01b031614612aa05760405162461bcd60e51b8152600401610a2990615d72565b6001600160a01b038088166000818152600160209081526040808320948b168084529490915290819020889055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590612afb908990615dc3565b60405180910390a350505050505050565b6007546001600160a01b031681565b600160209081526000928352604080842090915290825290205481565b6004546001600160a01b031681565b6003546001600160a01b03163314612b715760405162461bcd60e51b8152600401610a2990615b87565b600580546001600160a01b0319166001600160a01b0383169081179091556040517fcf1d3f17e521c635e0d20b8acba94ba170afc041d0546d46dafa09d3c9c19eb390600090a250565b612bc3614a44565b506040805160608101825260115467ffffffffffffffff80821683526801000000000000000082041660208301819052600160801b9091046001600160801b03169282019290925290420380612c1a5750506131b6565b67ffffffffffffffff42166020830152612c32614a2d565b5060408051808201909152600d546001600160801b038082168352600160801b9091041660208201819052612d3257825167ffffffffffffffff16640ff28289d314612cbf57640ff28289d38084526040517f33af5ce86e8438eff54589f85332916444457dfa8685493fbd579b809097026b91612cb69160009182918290615897565b60405180910390a15b5050805160118054602084015160409094015167ffffffffffffffff1990911667ffffffffffffffff938416176fffffffffffffffff00000000000000001916680100000000000000009390941692909202929092176001600160801b03908116600160801b91909216021790556131b6565b600080612d3d614a2d565b50604080518082018252600c546001600160801b03808216808452600160801b9092048116602084015286516008549451630acc462360e31b81529394600094612e1f9492909316926001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693635662311893612dc9939216918890600401615848565b60206040518083038186803b158015612de157600080fd5b505afa158015612df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e199190615374565b90613aba565b9050670de0b6b3a7640000612e5c87611c1f8a6000015167ffffffffffffffff1689600001516001600160801b031661451f90919063ffffffff16565b81612e6357fe5b049350612e83612e7285614579565b86516001600160801b0316906145d5565b6001600160801b031685526000620186a0612ea08661271061451f565b81612ea757fe5b049050612eb48282614556565b6020840151612ecd9083906001600160801b031661451f565b81612ed457fe5b049350612ef7612ee385614579565b60408a01516001600160801b0316906145d5565b6001600160801b03166040890152612f25612f1185614579565b60208501516001600160801b0316906145d5565b600c80546001600160801b03908116600160801b9382168402179091558751600d805460208b01516001600160801b031990911692841692831784169316909302919091179091556000908390612f8490670de0b6b3a764000061451f565b81612f8b57fe5b0490506709b6e64a8ec600008110156130515760006709b6e64a8ec60000612fbf670de0b6b3a7640000611c1f8386614556565b81612fc657fe5b0490506000612ff4612fdc8b611c1f858061451f565b7054a2b63d65d79d094abb6688000000000090613aba565b8b5190915081906130209067ffffffffffffffff167054a2b63d65d79d094abb6688000000000061451f565b8161302757fe5b0467ffffffffffffffff16808c526403fca0a271111561304a576403fca0a2718b525b5050613102565b670b1a2bc2ec5000008111156131025760006702c68af0bb14000061308a670de0b6b3a7640000611c1f85670b1a2bc2ec500000614556565b8161309157fe5b04905060006130a7612fdc8b611c1f858061451f565b8b519091507054a2b63d65d79d094abb66880000000000906130d39067ffffffffffffffff168361451f565b816130da57fe5b0467ffffffffffffffff16808c52653e4b4dea603810156130ff57653e4b4dea60388b525b50505b88516040517f33af5ce86e8438eff54589f85332916444457dfa8685493fbd579b809097026b9161313891899189918690615897565b60405180910390a1505086516011805460208a01516040909a015167ffffffffffffffff1990911667ffffffffffffffff938416176fffffffffffffffff000000000000000019166801000000000000000093909a1692909202989098176001600160801b03908116600160801b9190921602179096555050505050505b565b600c546001600160801b0380821691600160801b90041682565b60408051600481526024810182526020810180516001600160e01b03166306fdde0360e01b179052905160609160009183916001600160a01b038616916132199190615413565b600060405180830381855afa9150503d8060008114613254576040519150601f19603f3d011682016040523d82523d6000602084013e613259565b606091505b509150915081801561326c575060008151115b61329157604051806040016040528060038152602001623f3f3f60e81b8152506132a5565b808060200190518101906132a5919061530a565b925050505b919050565b60408051808201909152600d546001600160801b038082168352600160801b9091041660208201526000906132e6908360016147a7565b8151600d80546020948501516001600160801b03908116600160801b029381166001600160801b031990921691909117169190911790556001600160a01b0386166000908152600f9092526040909120549091506133449083614556565b6001600160a01b038086166000908152600f6020526040808220939093556008549251636d289ce560e11b815290927f000000000000000000000000000000000000000000000000000000000000000083169263da5139ca926133b292909116908690600190600401615874565b60206040518083038186803b1580156133ca57600080fd5b505afa1580156133de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134029190615374565b600c546008549192506001600160801b03169061342a906001600160a01b0316838388614604565b61344661343683614579565b6001600160801b038316906145d5565b600c80546001600160801b0319166001600160801b03929092169190911790556001600160a01b0386168561347b573361349d565b7f00000000000000000000000000000000000000000000000000000000000000005b6001600160a01b03167fc8e512d8f188ca059984b5853d2bf653da902696b8512785b182b2c813789a6e85876040516134d7929190615dcc565b60405180910390a350509392505050565b60006134f2614a2d565b50604080518082018252600c546001600160801b03808216808452600160801b90920481166020840152600854600d549451636d289ce560e11b8152939492936000936001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169463da5139ca9461357b949216921690600190600401615848565b60206040518083038186803b15801561359357600080fd5b505afa1580156135a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135cb9190615374565b83516001600160801b0316019050801561360d578061360084602001516001600160801b03168761451f90919063ffffffff16565b8161360757fe5b0461360f565b845b93506103e861363461362086614579565b60208601516001600160801b0316906145d5565b6001600160801b0316101561364f5760009350505050610bc8565b61365a83868661481c565b8051600c80546020938401516001600160801b03908116600160801b029381166001600160801b031990921691909117169190911790556001600160a01b03881660009081529081905260409020546136b39085613aba565b6001600160a01b038089166000908152602081905260409020919091556008546136e09116868489614604565b866001600160a01b0316866136f55733613717565b7f00000000000000000000000000000000000000000000000000000000000000005b6001600160a01b03167f30a8c4f9ab5af7e1309ca87c32377d1a83366c5990472dbf9d262450eae14e388787604051613751929190615dcc565b60405180910390a35050509392505050565b600061376d614a2d565b50604080518082018252600c546001600160801b038082168352600160801b90910481166020830152600854600d549351636d289ce560e11b815292936000936001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169463da5139ca946137f494921692911690600190600401615848565b60206040518083038186803b15801561380c57600080fd5b505afa158015613820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138449190615374565b825160208401516001600160801b0391821692909201925016613867858361451f565b8161386e57fe5b33600090815260208190526040902054919004935061388d9085614556565b336000908152602081905260409020556138a9611e2084614579565b6001600160801b031682526138c0611e4885614579565b6001600160801b0316602083018190526103e811156138f15760405162461bcd60e51b8152600401610a2990615c28565b8151600c805460208501516001600160801b03908116600160801b029381166001600160801b031990921691909117169190911790556040516001600160a01b0386169033907f6e853a5fd6b51d773691f542ebac8513c9992a51380d4c342031056a64114228906139669087908990615dcc565b60405180910390a3600854604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc926139c792919091169030908a9089906004016156fd565b600060405180830381600087803b1580156139e157600080fd5b505af11580156139f5573d6000803e3d6000fd5b50505050505092915050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009182916060916001600160a01b03861691613a489190615413565b600060405180830381855afa9150503d8060008114613a83576040519150601f19603f3d011682016040523d82523d6000602084013e613a88565b606091505b5091509150818015613a9b575080516020145b613aa65760126132a5565b808060200190518101906132a591906153cb565b81810181811015610b545760405162461bcd60e51b8152600401610a2990615a06565b60008080620186a0613af085603261451f565b81613af757fe5b049050613b37613b078583613aba565b60408051808201909152600d546001600160801b038082168352600160801b90910416602082015290600161486e565b8151600d80546020948501516001600160801b03908116600160801b029381166001600160801b03199092169190911716919091179055336000908152600f909252604090912054909350613b8c9084613aba565b336000818152600f6020526040908190209290925590516001600160a01b03871691907f3a5151e57d3bc9798e7853034ac52293d1a0e12a2b44725e75b03b21f86477a690613be090889086908990615dda565b60405180910390a3600854604051636d289ce560e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263da5139ca92613c409291909116908890600090600401615874565b60206040518083038186803b158015613c5857600080fd5b505afa158015613c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c909190615374565b9150613c9a614a2d565b5060408051808201909152600c546001600160801b038082168352600160801b90910416602082018190526103e81115613ce65760405162461bcd60e51b8152600401610a2990615c28565b613d03613cf284614579565b82516001600160801b0316906145a6565b6001600160801b03908116808352600c805460208501518416600160801b026001600160801b0319909116909217909216179055600854604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc92613d9092919091169030908b9089906004016156fd565b600060405180830381600087803b158015613daa57600080fd5b505af1158015613dbe573d6000803e3d6000fd5b5050505050509250929050565b6001600160a01b0383166000908152600f602052604081205480613df3576001915050610bc8565b6001600160a01b0385166000908152600e602052604090205480613e1c57600092505050610bc8565b613e24614a2d565b5060408051808201909152600d546001600160801b03808216808452600160801b909204166020830181905290613e62908790611c1f90879061451f565b81613e6957fe5b600754919004906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169163566231189116613ec98a613eb457620124f8613eb9565b62012cc85b611c1f886509184e72a00061451f565b60006040518463ffffffff1660e01b8152600401613ee993929190615874565b60206040518083038186803b158015613f0157600080fd5b505afa158015613f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f399190615374565b1015979650505050505050565b6000808412613f56575082610bc8565b600019841415613f67575081610bc8565b600119841415613f78575080610bc8565b60405162461bcd60e51b8152600401610a2990615a74565b336000908152600e6020526040902054613faa9082614556565b336000908152600e6020526040902055600b54613fc79082614556565b600b556040516001600160a01b0383169033907f8ad4d3ff00da092c7ad9a573ea4f5f6a3dffc6712dc06d3f78f49b862297c40290614007908590615dc3565b60405180910390a3600754604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc926140689291909116903090879087906004016156fd565b600060405180830381600087803b15801561408257600080fd5b505af1158015614096573d6000803e3d6000fd5b505050505050565b600080600080600080898060200190518101906140bb91906150a1565b93509350935093506140ce828989613f46565b91506140db818989613f46565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166302b9446c8a86338787876040518763ffffffff1660e01b8152600401614132959493929190615727565b60408051808303818588803b15801561414a57600080fd5b505af115801561415e573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190614183919061538c565b955095505050505094509492505050565b600080600080600080888060200190518101906141b191906150a1565b93509350935093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166397da6d308533866141f6878e8e613f46565b614201878f8f613f46565b6040518663ffffffff1660e01b8152600401614221959493929190615727565b6040805180830381600087803b15801561423a57600080fd5b505af115801561424e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614272919061538c565b9550955050505050935093915050565b606084801561428f575083155b156142bd5785836040516020016142a792919061542f565b6040516020818303038152906040529050610d76565b841580156142c85750835b156142e05785826040516020016142a792919061542f565b8480156142ea5750835b15614304578583836040516020016142a793929190615451565b5093949350505050565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415801561435b57506001600160a01b0383163014155b6143775760405162461bcd60e51b8152600401610a2990615ae2565b60006060846001600160a01b031686856040516143949190615413565b60006040518083038185875af1925050503d80600081146143d1576040519150601f19603f3d011682016040523d82523d6000602084013e6143d6565b606091505b5091509150816143e5826148bc565b906144035760405162461bcd60e51b8152600401610a299190615646565b5095945050505050565b600083602001516001600160801b03166000141561442c575081610bc8565b602084015184516001600160801b039182169161444b9186911661451f565b8161445257fe5b04905081801561449657508284600001516001600160801b031661448c86602001516001600160801b03168461451f90919063ffffffff16565b8161449357fe5b04105b15610bc857610b6f816001613aba565b82516000906001600160801b03166144bf575081610bc8565b835160208501516001600160801b03918216916144de9186911661451f565b816144e557fe5b04905081801561449657508284602001516001600160801b031661448c86600001516001600160801b03168461451f90919063ffffffff16565b600081158061453a5750508082028282828161453757fe5b04145b610b545760405162461bcd60e51b8152600401610a2990615d04565b80820382811115610b545760405162461bcd60e51b8152600401610a29906158bc565b60006001600160801b038211156145a25760405162461bcd60e51b8152600401610a29906159cf565b5090565b8082036001600160801b038084169082161115610b545760405162461bcd60e51b8152600401610a29906158bc565b8181016001600160801b038083169082161015610b545760405162461bcd60e51b8152600401610a2990615a06565b80156146805761465c827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f7888aec87306040518363ffffffff1660e01b815260040161218f9291906156e3565b83111561467b5760405162461bcd60e51b8152600401610a2990615c96565b614705565b604051633c6340f360e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc906146d29087903390309089906004016156fd565b600060405180830381600087803b1580156146ec57600080fd5b505af1158015614700573d6000803e3d6000fd5b505050505b50505050565b60408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b179052905160609160009183916001600160a01b038616916132199190615413565b600060405180604001604052806002815260200161190160f01b81525061477761491c565b8360405160200161478a93929190615451565b604051602081830303815290604052805190602001209050919050565b6147af614a2d565b60006147bc85858561440d565b90506147db6147ca82614579565b86516001600160801b0316906145a6565b6001600160801b031685526148066147f285614579565b60208701516001600160801b0316906145a6565b6001600160801b03166020860152939492505050565b614824614a2d565b61484161483084614579565b85516001600160801b0316906145d5565b6001600160801b0316845261485861362083614579565b6001600160801b03166020850152509192915050565b614876614a2d565b60006148838585856144a6565b9050614891612e7285614579565b6001600160801b031685526148066148a882614579565b60208701516001600160801b0316906145d5565b6060604482511015614902575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c7900000060208201526132aa565b60048201915081806020019051810190610b54919061530a565b6000467f000000000000000000000000000000000000000000000000000000000000000081146149545761494f8161497c565b614976565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b60007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218823060405160200161478a93929190615609565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106149f457805160ff1916838001178555614a21565b82800160010185558215614a21579182015b82811115614a21578251825591602001919060010190614a06565b506145a2929150614a64565b604080518082019091526000808252602082015290565b604080516060810182526000808252602082018190529181019190915290565b5b808211156145a25760008155600101614a65565b8035610b5481615f13565b60008083601f840112614a95578182fd5b50813567ffffffffffffffff811115614aac578182fd5b6020830191508360208083028501011115610fa257600080fd5b600082601f830112614ad6578081fd5b8135614ae9614ae482615e97565b615e70565b818152915060208083019084810181840286018201871015614b0a57600080fd5b60005b84811015614b2957813584529282019290820190600101614b0d565b505050505092915050565b60008083601f840112614b45578182fd5b50813567ffffffffffffffff811115614b5c578182fd5b602083019150836020828501011115610fa257600080fd5b600082601f830112614b84578081fd5b8135614b92614ae482615eb7565b9150808252836020828501011115614ba957600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215614bd3578081fd5b8135610bc881615f13565b600060208284031215614bef578081fd5b8151610bc881615f13565b60008060008060008060c08789031215614c12578182fd5b8635614c1d81615f13565b95506020870135614c2d81615f13565b94506040870135614c3d81615f2b565b93506060870135614c4d81615f39565b9598949750929560808101359460a0909101359350915050565b600080600080600060a08688031215614c7e578283fd5b8535614c8981615f13565b9450602086013567ffffffffffffffff811115614ca4578384fd5b614cb088828901614b74565b9450506040860135614cc181615f2b565b92506060860135614cd181615f2b565b91506080860135614ce181615f39565b809150509295509295909350565b60008060408385031215614d01578182fd5b8235614d0c81615f13565b91506020830135614d1c81615f13565b809150509250929050565b600080600060608486031215614d3b578081fd5b8335614d4681615f13565b92506020840135614d5681615f13565b929592945050506040919091013590565b600080600080600080600060e0888a031215614d81578485fd5b8735614d8c81615f13565b96506020880135614d9c81615f13565b955060408801359450606088013593506080880135614dba81615f39565b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215614de9578182fd5b8235614df481615f13565b91506020830135614d1c81615f2b565b600080600060608486031215614e18578081fd5b8335614e2381615f13565b92506020840135614e3381615f2b565b91506040840135614e4381615f2b565b809150509250925092565b600080600060608486031215614e62578081fd5b8335614e6d81615f13565b92506020840135614d5681615f2b565b60008060408385031215614e8f578182fd5b8235614e9a81615f13565b946020939093013593505050565b600080600080600080600060a0888a031215614ec2578081fd5b873567ffffffffffffffff80821115614ed9578283fd5b614ee58b838c01614a84565b909950975060208a0135915080821115614efd578283fd5b50614f0a8a828b01614a84565b9096509450506040880135614f1e81615f13565b92506060880135614f2e81615f13565b91506080880135614f3e81615f2b565b8091505092959891949750929550565b60008060008060008060608789031215614f66578384fd5b863567ffffffffffffffff80821115614f7d578586fd5b614f898a838b01614a84565b90985096506020890135915080821115614fa1578586fd5b614fad8a838b01614a84565b90965094506040890135915080821115614fc5578384fd5b50614fd289828a01614a84565b979a9699509497509295939492505050565b600060208284031215614ff5578081fd5b8151610bc881615f2b565b60008060408385031215615012578182fd5b825161501d81615f2b565b6020939093015192949293505050565b600080600060608486031215615041578081fd5b833561504c81615f2b565b95602085013595506040909401359392505050565b60008060208385031215615073578182fd5b823567ffffffffffffffff811115615089578283fd5b61509585828601614b34565b90969095509350505050565b600080600080608085870312156150b6578182fd5b84516150c181615f13565b60208601519094506150d281615f13565b6040860151606090960151949790965092505050565b6000806000606084860312156150fc578081fd5b833561510781615f13565b925060208481013567ffffffffffffffff80821115615124578384fd5b818701915087601f830112615137578384fd5b8135615145614ae482615e97565b81815284810190848601868402860187018c1015615161578788fd5b8795505b8386101561518b576151778c82614a79565b835260019590950194918601918601615165565b509650505060408701359250808311156151a3578384fd5b50506151b186828701614ac6565b9150509250925092565b6000806000806000608086880312156151d2578283fd5b85356151dd81615f13565b945060208601356151ed81615f13565b935060408601356151fd81615f13565b9250606086013567ffffffffffffffff811115615218578182fd5b61522488828901614b34565b969995985093965092949392505050565b6000806000806080858703121561524a578182fd5b843561525581615f13565b9350602085013561526581615f13565b9250604085013561527581615f13565b9150606085013567ffffffffffffffff811115615290578182fd5b61529c87828801614b74565b91505092959194509250565b6000602082840312156152b9578081fd5b5035919050565b600080604083850312156152d2578182fd5b823591506020830135614d1c81615f13565b6000806000606084860312156152f8578081fd5b833592506020840135614e3381615f13565b60006020828403121561531b578081fd5b815167ffffffffffffffff811115615331578182fd5b8201601f81018413615341578182fd5b805161534f614ae482615eb7565b818152856020838501011115615363578384fd5b610d76826020830160208601615ee7565b600060208284031215615385578081fd5b5051919050565b6000806040838503121561539e578182fd5b505080516020909101519092909150565b6000602082840312156153c0578081fd5b8135610bc881615f39565b6000602082840312156153dc578081fd5b8151610bc881615f39565b600081518084526153ff816020860160208601615ee7565b601f01601f19169290920160200192915050565b60008251615425818460208701615ee7565b9190910192915050565b60008351615441818460208801615ee7565b9190910191825250602001919050565b60008451615463818460208901615ee7565b91909101928352506020820152604001919050565b60007f4b61736869204d6564205269736b200000000000000000000000000000000000825284516154b081600f850160208901615ee7565b601f60f91b600f9184019182015284516154d1816010840160208901615ee7565b602d60f81b6010929091019182015283516154f3816011840160208801615ee7565b0160110195945050505050565b600061626d60f01b8252845161551d816002850160208901615ee7565b601f60f91b600291840191820152845161553e816003840160208901615ee7565b602d60f81b600392909101918201528351615560816004840160208801615ee7565b0160040195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b039687168152949095166020850152911515604084015260ff166060830152608082015260a081019190915260c00190565b901515815260200190565b9115158252602082015260400190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b92835260208301919091526001600160a01b0316604082015260600190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610bc860208301846153e7565b60006020808301818452828554600180821660008114615680576001811461569e576156d6565b60028304607f16855260ff19831660408901526060880193506156d6565b600283048086526156ae8a615edb565b885b828110156156cc5781548b8201604001529084019088016156b0565b8a01604001955050505b5091979650505050505050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b6000608082016001600160a01b0380881684526020818816818601526080604086015282875180855260a0870191508289019450855b818110156157af578551851683529483019491830191600101615791565b50508581036060870152865180825290820193509150808601845b838110156157e6578151855293820193908201906001016157ca565b50929998505050505050505050565b60006001600160a01b038088168352808716602084015280861660408401525060806060830152826080830152828460a084013781830160a090810191909152601f909201601f19160101949350505050565b6001600160a01b039390931683526001600160801b039190911660208301521515604082015260600190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b938452602084019290925267ffffffffffffffff166040830152606082015260800190565b60208082526015908201527f426f72696e674d6174683a20556e646572666c6f770000000000000000000000604082015260600190565b6020808252601e908201527f4b61736869506169723a20616c726561647920696e697469616c697a65640000604082015260600190565b60208082526016908201527f45524332303a206e6f207a65726f206164647265737300000000000000000000604082015260600190565b6020808252601a908201527f4b61736869506169723a20616c6c2061726520736f6c76656e74000000000000604082015260600190565b60208082526015908201527f4f776e61626c653a207a65726f20616464726573730000000000000000000000604082015260600190565b6020808252601c908201527f426f72696e674d6174683a2075696e74313238204f766572666c6f7700000000604082015260600190565b60208082526018908201527f426f72696e674d6174683a20416464204f766572666c6f770000000000000000604082015260600190565b60208082526013908201527f4b61736869506169723a20626164207061697200000000000000000000000000604082015260600190565b6020808252601c908201527f4b61736869506169723a204e756d206f7574206f6620626f756e647300000000604082015260600190565b60208082526018908201527f45524332303a20616c6c6f77616e636520746f6f206c6f770000000000000000604082015260600190565b60208082526015908201527f4b61736869506169723a2063616e27742063616c6c0000000000000000000000604082015260600190565b6020808252600e908201527f45524332303a2045787069726564000000000000000000000000000000000000604082015260600190565b60208082526019908201527f4b61736869506169723a207573657220696e736f6c76656e7400000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604082015260600190565b60208082526018908201527f45524332303a204f776e65722063616e6e6f7420626520300000000000000000604082015260600190565b60208082526014908201527f4b617368693a2062656c6f77206d696e696d756d000000000000000000000000604082015260600190565b60208082526016908201527f45524332303a2062616c616e636520746f6f206c6f7700000000000000000000604082015260600190565b60208082526018908201527f4b61736869506169723a20536b696d20746f6f206d7563680000000000000000604082015260600190565b6020808252601a908201527f4b61736869506169723a20496e76616c69642073776170706572000000000000604082015260600190565b60208082526018908201527f426f72696e674d6174683a204d756c204f766572666c6f770000000000000000604082015260600190565b60208082526016908201527f4b61736869506169723a2072617465206e6f74206f6b00000000000000000000604082015260600190565b60208082526018908201527f45524332303a20496e76616c6964205369676e61747572650000000000000000604082015260600190565b6001600160801b0392831681529116602082015260400190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b67ffffffffffffffff93841681529190921660208201526001600160801b03909116604082015260600190565b60ff91909116815260200190565b6000808335601e19843603018112615e41578283fd5b83018035915067ffffffffffffffff821115615e5b578283fd5b602001915036819003821315610fa257600080fd5b60405181810167ffffffffffffffff81118282101715615e8f57600080fd5b604052919050565b600067ffffffffffffffff821115615ead578081fd5b5060209081020190565b600067ffffffffffffffff821115615ecd578081fd5b50601f01601f191660200190565b60009081526020902090565b60005b83811015615f02578181015183820152602001615eea565b838111156147055750506000910152565b6001600160a01b0381168114615f2857600080fd5b50565b8015158114615f2857600080fd5b60ff81168114615f2857600080fdfea2646970667358221220c52bc5ead87386c963e1bcb8cdf4a7805ab0bf38f7c5acc48af3dbf01822f70264736f6c634300060c0033",
    "deployedBytecode": "0x6080604052600436106102fd5760003560e01c80636b2ace871161018f5780638da5cb5b116100e1578063d8dfeb451161008a578063f46901ed11610064578063f46901ed146107f1578063f8ba4cff14610811578063f9557ccb14610826576102fd565b8063d8dfeb45146107a7578063dd62ed3e146107bc578063e30c3978146107dc576102fd565b8063b27c0e74116100bb578063b27c0e741461074e578063cd446e2214610772578063d505accf14610787576102fd565b80638da5cb5b1461070457806395d89b4114610719578063a9059cbb1461072e576102fd565b80637dc0d1d011610143578063860ffea11161011d578063860ffea1146106a4578063876467f8146106c45780638cad7fbe146106e4576102fd565b80637dc0d1d01461064c5780637ecebe00146106615780638285ef4014610681576102fd565b806374645ff31161017457806374645ff3146105f757806376ee101b1461060c5780637739d59d1461062c576102fd565b80636b2ace87146105c257806370a08231146105d7576102fd565b8063247fd03c11610253578063476343ee116101fc5780634ddf47d4116101d65780634ddf47d4146105875780634e71e0c81461059a578063656f3d64146105af576102fd565b8063476343ee1461052457806348e4163e146105395780634b8a352914610559576102fd565b80633ba0b9a91161022d5780633ba0b9a9146104da5780633f2617cb146104ef578063473e3ce71461050f576102fd565b8063247fd03c14610483578063313ce567146104a357806338d52e0f146104c5576102fd565b806315294c40116102b55780631c9e379b1161028f5780631c9e379b146104235780632317ef671461044357806323b872dd14610463576102fd565b806315294c40146103c157806318160ddd146103ee5780631b51e94014610403576102fd565b806306fdde03116102e657806306fdde0314610350578063078dfbe714610372578063095ea7b314610394576102fd565b8063017e7e581461030257806302ce728f1461032d575b600080fd5b34801561030e57600080fd5b5061031761083b565b604051610324919061556d565b60405180910390f35b34801561033957600080fd5b5061034261084a565b6040516103249291906155c5565b34801561035c57600080fd5b50610365610927565b6040516103249190615646565b34801561037e57600080fd5b5061039261038d366004614e04565b6109ff565b005b3480156103a057600080fd5b506103b46103af366004614e7d565b610aef565b60405161032491906155ba565b3480156103cd57600080fd5b506103e16103dc366004614e4e565b610b5a565b6040516103249190615dc3565b3480156103fa57600080fd5b506103e1610b77565b34801561040f57600080fd5b506103e161041e366004614e4e565b610b8d565b34801561042f57600080fd5b506103e161043e366004614bc2565b610ba2565b34801561044f57600080fd5b506103e161045e366004614e7d565b610bb4565b34801561046f57600080fd5b506103b461047e366004614d27565b610bcf565b34801561048f57600080fd5b5061036561049e3660046151bb565b610d49565b3480156104af57600080fd5b506104b8610d7f565b6040516103249190615e1d565b3480156104d157600080fd5b50610317610d9c565b3480156104e657600080fd5b506103e1610dab565b3480156104fb57600080fd5b5061039261050a366004614dd7565b610db1565b34801561051b57600080fd5b506103e1610e06565b34801561053057600080fd5b50610392610e0c565b34801561054557600080fd5b506103e1610554366004614bc2565b610f49565b34801561056557600080fd5b50610579610574366004614e7d565b610f5b565b604051610324929190615dcc565b610392610595366004615061565b610fa9565b3480156105a657600080fd5b5061039261108d565b6105796105bd366004614f4e565b61111b565b3480156105ce57600080fd5b50610317611a51565b3480156105e357600080fd5b506103e16105f2366004614bc2565b611a75565b34801561060357600080fd5b50610365611a87565b34801561061857600080fd5b50610392610627366004614ea8565b611b15565b34801561063857600080fd5b506103b4610647366004614dd7565b6125e4565b34801561065857600080fd5b506103176125f3565b34801561066d57600080fd5b506103e161067c366004614bc2565b612602565b34801561068d57600080fd5b50610696612614565b604051610324929190615da9565b3480156106b057600080fd5b506103926106bf366004614e4e565b61262e565b3480156106d057600080fd5b506103926106df366004614e7d565b61270f565b3480156106f057600080fd5b506103b46106ff366004614bc2565b61274f565b34801561071057600080fd5b50610317612764565b34801561072557600080fd5b50610365612773565b34801561073a57600080fd5b506103b4610749366004614e7d565b612837565b34801561075a57600080fd5b50610763612914565b60405161032493929190615df0565b34801561077e57600080fd5b50610317612947565b34801561079357600080fd5b506103926107a2366004614d67565b61296b565b3480156107b357600080fd5b50610317612b0c565b3480156107c857600080fd5b506103e16107d7366004614cef565b612b1b565b3480156107e857600080fd5b50610317612b38565b3480156107fd57600080fd5b5061039261080c366004614bc2565b612b47565b34801561081d57600080fd5b50610392612bbb565b34801561083257600080fd5b506106966131b8565b6005546001600160a01b031681565b60095460405163d6d7d52560e01b815260009182916001600160a01b039091169063d6d7d5259061088090600a90600401615659565b6040805180830381600087803b15801561089957600080fd5b505af11580156108ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d19190615000565b9092509050811561091e5760108190556040517f9f9192b5edb17356c524e08d9e025c8e2f6307e6ea52fb7968faa3081f51c3c890610911908390615dc3565b60405180910390a1610923565b506010545b9091565b60075460609061093f906001600160a01b03166131d2565b600854610954906001600160a01b03166131d2565b60095460405163634ce26b60e11b81526001600160a01b039091169063c699c4d69061098590600a90600401615659565b60006040518083038186803b15801561099d57600080fd5b505afa1580156109b1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109d9919081019061530a565b6040516020016109eb93929190615478565b604051602081830303815290604052905090565b6003546001600160a01b03163314610a325760405162461bcd60e51b8152600401610a2990615b87565b60405180910390fd5b8115610ace576001600160a01b038316151580610a4c5750805b610a685760405162461bcd60e51b8152600401610a2990615998565b6003546040516001600160a01b038086169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b0385166001600160a01b031991821617909155600480549091169055610aea565b600480546001600160a01b0319166001600160a01b0385161790555b505050565b3360008181526001602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610b48908690615dc3565b60405180910390a35060015b92915050565b6000610b64612bbb565b610b6f8484846132af565b949350505050565b600c54600160801b90046001600160801b031690565b6000610b97612bbb565b610b6f8484846134e8565b600e6020526000908152604090205481565b6000610bbe612bbb565b610bc88383613763565b9392505050565b60008115610cf4576001600160a01b03841660009081526020819052604090205482811015610c105760405162461bcd60e51b8152600401610a2990615c5f565b836001600160a01b0316856001600160a01b031614610cf2576001600160a01b03851660009081526001602090815260408083203384529091529020546000198114610c9f5783811015610c765760405162461bcd60e51b8152600401610a2990615aab565b6001600160a01b0386166000908152600160209081526040808320338452909152902084820390555b6001600160a01b038516610cc55760405162461bcd60e51b8152600401610a299061592a565b506001600160a01b0380861660009081526020819052604080822086850390559186168152208054840190555b505b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d379190615dc3565b60405180910390a35060019392505050565b60608585858585604051602001610d649594939291906157f5565b60405160208183030381529060405290505b95945050505050565b600854600090610d97906001600160a01b0316613a01565b905090565b6008546001600160a01b031681565b60105481565b6003546001600160a01b03163314610ddb5760405162461bcd60e51b8152600401610a2990615b87565b6001600160a01b03919091166000908152600660205260409020805460ff1916911515919091179055565b600b5481565b610e14612bbb565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6f57600080fd5b505afa158015610e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea79190614bde565b6011546001600160a01b038216600090815260208190526040902054919250600160801b90046001600160801b031690610ee19082613aba565b6001600160a01b0383166000818152602081905260409081902092909255601180546001600160801b0316905590517fbe641c3ffc44b2d6c184f023fa4ed7bda4b6ffa71e03b3c98ae0c776da1f17e790610f3d908490615dc3565b60405180910390a25050565b600f6020526000908152604090205481565b600080610f66612bbb565b610f708484613add565b8092508193505050610f86336000601054613dcb565b610fa25760405162461bcd60e51b8152600401610a2990615b50565b9250929050565b6007546001600160a01b031615610fd25760405162461bcd60e51b8152600401610a29906158f3565b610fde81830183615235565b80516007906000906008908290600990829061100190600a9060208a01906149b3565b5081546001600160a01b0398891661010092830a908102908a021990911617909155825497871691810a918202918702199097161790558154958416940a938402938302199094169290921790925550600754166110715760405162461bcd60e51b8152600401610a2990615a3d565b50506011805467ffffffffffffffff1916640ff28289d3179055565b6004546001600160a01b03163381146110b85760405162461bcd60e51b8152600401610a2990615bbc565b6003546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b039092166001600160a01b0319928316179055600480549091169055565b600080611126614a2d565b60005b88811015611a135760008a8a8381811061113f57fe5b905060200201602081019061115491906153af565b9050826020015115801561116b5750600a8160ff16105b1561118057611178612bbb565b600160208401525b60ff8116600a14156111da57600080600089898681811061119d57fe5b90506020028101906111af9190615e2b565b8101906111bc91906152e4565b9250925092506111d282826106bf868c8c613f46565b505050611a0a565b60ff81166001141561123b5760008060008989868181106111f757fe5b90506020028101906112099190615e2b565b81019061121691906152e4565b925092509250611231828261122c868c8c613f46565b6134e8565b9750505050611a0a565b60ff81166002141561129b57600080600089898681811061125857fe5b905060200281019061126a9190615e2b565b81019061127791906152e4565b925092509250611292828261128d868c8c613f46565b6132af565b50505050611a0a565b60ff8116600314156112f6576000808888858181106112b657fe5b90506020028101906112c89190615e2b565b8101906112d591906152c0565b915091506112ed816112e8848a8a613f46565b613763565b96505050611a0a565b60ff8116600414156113535760008088888581811061131157fe5b90506020028101906113239190615e2b565b81019061133091906152c0565b9150915061134881611343848a8a613f46565b613f90565b505060018352611a0a565b60ff8116600514156113b65760008088888581811061136e57fe5b90506020028101906113809190615e2b565b81019061138d91906152c0565b915091506113a5816113a0848a8a613f46565b613add565b600187529097509550611a0a915050565b60ff8116600b14156114555760008060008989868181106113d357fe5b90506020028101906113e59190615e2b565b8101906113f2919061502d565b92509250925060008061140361084a565b915091508415806114115750815b801561141c57508381115b801561142f575082158061142f57508281115b61144b5760405162461bcd60e51b8152600401610a2990615d3b565b5050505050611a0a565b60ff811660181415611534576000806000806000808c8c8981811061147657fe5b90506020028101906114889190615e2b565b8101906114959190614bfa565b9550955095509550955095507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c0a47c938787878787876040518763ffffffff1660e01b81526004016114f796959493929190615581565b600060405180830381600087803b15801561151157600080fd5b505af1158015611525573d6000803e3d6000fd5b50505050505050505050611a0a565b60ff8116601414156115bc576115b287878481811061154f57fe5b90506020028101906115619190615e2b565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d92508c91508690508181106115a457fe5b90506020020135878761409e565b9095509350611a0a565b60ff811660151415611627576115b28787848181106115d757fe5b90506020028101906115e99190615e2b565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508992508891506141949050565b60ff8116601614156116ff57600080600089898681811061164457fe5b90506020028101906116569190615e2b565b8101906116639190614d27565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f18d03cc8433856116a6868e8e613f46565b6040518563ffffffff1660e01b81526004016116c594939291906156fd565b600060405180830381600087803b1580156116df57600080fd5b505af11580156116f3573d6000803e3d6000fd5b50505050505050611a0a565b60ff81166017141561179357600060608089898681811061171c57fe5b905060200281019061172e9190615e2b565b81019061173b91906150e8565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630fca8843843385856040518563ffffffff1660e01b81526004016116c5949392919061575b565b60ff8116601e1415611865576000606060008060008b8b888181106117b457fe5b90506020028101906117c69190615e2b565b8101906117d39190614c67565b945094509450945094506117ea8484848d8d614282565b9350606061180b8f8f8a8181106117fd57fe5b90506020020135878761430e565b90508160ff1660011415611834578080602001905181019061182d9190615374565b9a5061185a565b8160ff166002141561185a5780806020019051810190611854919061538c565b909b5099505b505050505050611a0a565b60ff81166006141561198d57600087878481811061187f57fe5b90506020028101906118919190615e2b565b81019061189e91906152a8565b6008549091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169163da5139ca91166119156118e5858b8b613f46565b60408051808201909152600d546001600160801b038082168352600160801b90910416602082015290600161440d565b60016040518463ffffffff1660e01b815260040161193593929190615874565b60206040518083038186803b15801561194d57600080fd5b505afa158015611961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119859190615374565b955050611a0a565b60ff811660071415611a0a5760008787848181106119a757fe5b90506020028101906119b99190615e2b565b8101906119c691906152a8565b9050611a066119d6828888613f46565b60408051808201909152600d546001600160801b038082168352600160801b9091041660208201529060006144a6565b9550505b50600101611129565b50805115611a4557611a29336000601054613dcb565b611a455760405162461bcd60e51b8152600401610a2990615b50565b50965096945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006020819052908152604090205481565b600a805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015611b0d5780601f10611ae257610100808354040283529160200191611b0d565b820191906000526020600020905b815481529060010190602001808311611af057829003601f168201915b505050505081565b6000611b1f61084a565b915050611b2a612bbb565b6000806000611b37614a2d565b5060408051808201909152600d546001600160801b038082168352600160801b9091041660208201528a60005b81811015611df65760008e8e83818110611b7a57fe5b9050602002016020810190611b8f9190614bc2565b9050611b9c818a8a613dcb565b611ded5760008d8d84818110611bae57fe5b6020029190910135915060009050611bc786838361440d565b6007549091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169163da5139ca911669152d02c7e14af6800000611c258f611c1f886201b58061451f565b9061451f565b81611c2c57fe5b0460006040518463ffffffff1660e01b8152600401611c4d93929190615874565b60206040518083038186803b158015611c6557600080fd5b505afa158015611c79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9d9190615374565b6001600160a01b0385166000908152600e6020526040902054909150611cc39082614556565b6001600160a01b0385166000908152600e6020908152604080832093909355600f90522054611cf29084614556565b6001600160a01b038086166000908152600f60205260409020919091558d1615611d1c578c611d1e565b8d5b6001600160a01b0316846001600160a01b03167f8ad4d3ff00da092c7ad9a573ea4f5f6a3dffc6712dc06d3f78f49b862297c40283604051611d609190615dc3565b60405180910390a36001600160a01b03808516908e1615611d81578d611d83565b335b6001600160a01b03167fc8e512d8f188ca059984b5853d2bf653da902696b8512785b182b2c813789a6e8486604051611dbd929190615dcc565b60405180910390a3611dcf8a82613aba565b9950611ddb8983613aba565b9850611de78884613aba565b97505050505b50600101611b64565b5083611e145760405162461bcd60e51b8152600401610a2990615961565b611e31611e2085614579565b83516001600160801b0316906145a6565b6001600160801b03168252611e5c611e4884614579565b60208401516001600160801b0316906145a6565b6001600160801b03908116602084018190528351600d80546001600160801b03191691841691909117909216600160801b909102179055600b54611ea09086614556565b600b55600854604051636d289ce560e11b81526000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263da5139ca92611efb9216908990600190600401615874565b60206040518083038186803b158015611f1357600080fd5b505afa158015611f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4b9190615374565b9050876123e057604051634656bfdf60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638cad7fbe90611f9e908c9060040161556d565b60206040518083038186803b158015611fb657600080fd5b505afa158015611fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fee9190614fe4565b61200a5760405162461bcd60e51b8152600401610a2990615ccd565b600754604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc9261206392919091169030908e908c906004016156fd565b600060405180830381600087803b15801561207d57600080fd5b505af1158015612091573d6000803e3d6000fd5b50506007546008546040516371a1ff0960e11b81526001600160a01b03808f16955063e343fe1294506120d1938116921690309087908d90600401615727565b6040805180830381600087803b1580156120ea57600080fd5b505af11580156120fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612122919061538c565b5050600c54600854604051633de222bb60e21b81526000926121e5926001600160801b03909116916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f7888aec9261218f92919091169030906004016156e3565b60206040518083038186803b1580156121a757600080fd5b505afa1580156121bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121df9190615374565b90614556565b905060006121f38284614556565b90506000620186a06122078361271061451f565b8161220e57fe5b0490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f18d03cc600860009054906101000a90046001600160a01b0316307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b1580156122b057600080fd5b505afa1580156122c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e89190614bde565b856040518563ffffffff1660e01b815260040161230894939291906156fd565b600060405180830381600087803b15801561232257600080fd5b505af1158015612336573d6000803e3d6000fd5b5050505061236a612358612353838661455690919063ffffffff16565b614579565b600c546001600160801b0316906145d5565b600c80546001600160801b0319166001600160801b0392909216919091179055306001600160a01b038d167f30a8c4f9ab5af7e1309ca87c32377d1a83366c5990472dbf9d262450eae14e386123c08585614556565b60006040516123d0929190615dcc565b60405180910390a35050506125d4565b6007546001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169163f18d03cc919081169030908d1615612428578c61242a565b8d5b8a6040518563ffffffff1660e01b815260040161244a94939291906156fd565b600060405180830381600087803b15801561246457600080fd5b505af1158015612478573d6000803e3d6000fd5b505050506001600160a01b0389161561251c576007546008546040516371a1ff0960e11b81526001600160a01b03808d169363e343fe12936124c893918316921690339087908d90600401615727565b6040805180830381600087803b1580156124e157600080fd5b505af11580156124f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612519919061538c565b50505b600854604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc926125759291909116903390309087906004016156fd565b600060405180830381600087803b15801561258f57600080fd5b505af11580156125a3573d6000803e3d6000fd5b505050506125b361235882614579565b600c80546001600160801b0319166001600160801b03929092169190911790555b5050505050505050505050505050565b6000610bc88383601054613dcb565b6009546001600160a01b031681565b60026020526000908152604090205481565b600d546001600160801b0380821691600160801b90041682565b6001600160a01b0383166000908152600e60205260409020546126519082613aba565b6001600160a01b0384166000908152600e6020526040902055600b546126778183613aba565b600b55600754612692906001600160a01b0316838386614604565b836001600160a01b0316836126a757336126c9565b7f00000000000000000000000000000000000000000000000000000000000000005b6001600160a01b03167f9ed03113de523cebfe5e49d5f8e12894b1c0d42ce805990461726444c90eab87846040516127019190615dc3565b60405180910390a350505050565b612717612bbb565b6127218282613f90565b61272f336000601054613dcb565b61274b5760405162461bcd60e51b8152600401610a2990615b50565b5050565b60066020526000908152604090205460ff1681565b6003546001600160a01b031681565b60075460609061278b906001600160a01b031661470b565b6008546127a0906001600160a01b031661470b565b60095460405163634ce26b60e11b81526001600160a01b039091169063c699c4d6906127d190600a90600401615659565b60006040518083038186803b1580156127e957600080fd5b505afa1580156127fd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612825919081019061530a565b6040516020016109eb93929190615500565b600081156128d157336000908152602081905260409020548281101561286f5760405162461bcd60e51b8152600401610a2990615c5f565b336001600160a01b038516146128cf576001600160a01b0384166128a55760405162461bcd60e51b8152600401610a299061592a565b3360009081526020819052604080822085840390556001600160a01b038616825290208054840190555b505b826001600160a01b0316336001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b489190615dc3565b60115467ffffffffffffffff8082169168010000000000000000810490911690600160801b90046001600160801b031683565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b0387166129915760405162461bcd60e51b8152600401610a2990615bf1565b8342106129b05760405162461bcd60e51b8152600401610a2990615b19565b6001600160a01b0387166000818152600260209081526040918290208054600181810190925592519092612a2e92612a13927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928e928e928e92918e91016155d5565b60405160208183030381529060405280519060200120614752565b85858560405160008152602001604052604051612a4e9493929190615628565b6020604051602081039080840390855afa158015612a70573d6000803e3d6000fd5b505050602060405103516001600160a01b031614612aa05760405162461bcd60e51b8152600401610a2990615d72565b6001600160a01b038088166000818152600160209081526040808320948b168084529490915290819020889055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590612afb908990615dc3565b60405180910390a350505050505050565b6007546001600160a01b031681565b600160209081526000928352604080842090915290825290205481565b6004546001600160a01b031681565b6003546001600160a01b03163314612b715760405162461bcd60e51b8152600401610a2990615b87565b600580546001600160a01b0319166001600160a01b0383169081179091556040517fcf1d3f17e521c635e0d20b8acba94ba170afc041d0546d46dafa09d3c9c19eb390600090a250565b612bc3614a44565b506040805160608101825260115467ffffffffffffffff80821683526801000000000000000082041660208301819052600160801b9091046001600160801b03169282019290925290420380612c1a5750506131b6565b67ffffffffffffffff42166020830152612c32614a2d565b5060408051808201909152600d546001600160801b038082168352600160801b9091041660208201819052612d3257825167ffffffffffffffff16640ff28289d314612cbf57640ff28289d38084526040517f33af5ce86e8438eff54589f85332916444457dfa8685493fbd579b809097026b91612cb69160009182918290615897565b60405180910390a15b5050805160118054602084015160409094015167ffffffffffffffff1990911667ffffffffffffffff938416176fffffffffffffffff00000000000000001916680100000000000000009390941692909202929092176001600160801b03908116600160801b91909216021790556131b6565b600080612d3d614a2d565b50604080518082018252600c546001600160801b03808216808452600160801b9092048116602084015286516008549451630acc462360e31b81529394600094612e1f9492909316926001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693635662311893612dc9939216918890600401615848565b60206040518083038186803b158015612de157600080fd5b505afa158015612df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e199190615374565b90613aba565b9050670de0b6b3a7640000612e5c87611c1f8a6000015167ffffffffffffffff1689600001516001600160801b031661451f90919063ffffffff16565b81612e6357fe5b049350612e83612e7285614579565b86516001600160801b0316906145d5565b6001600160801b031685526000620186a0612ea08661271061451f565b81612ea757fe5b049050612eb48282614556565b6020840151612ecd9083906001600160801b031661451f565b81612ed457fe5b049350612ef7612ee385614579565b60408a01516001600160801b0316906145d5565b6001600160801b03166040890152612f25612f1185614579565b60208501516001600160801b0316906145d5565b600c80546001600160801b03908116600160801b9382168402179091558751600d805460208b01516001600160801b031990911692841692831784169316909302919091179091556000908390612f8490670de0b6b3a764000061451f565b81612f8b57fe5b0490506709b6e64a8ec600008110156130515760006709b6e64a8ec60000612fbf670de0b6b3a7640000611c1f8386614556565b81612fc657fe5b0490506000612ff4612fdc8b611c1f858061451f565b7054a2b63d65d79d094abb6688000000000090613aba565b8b5190915081906130209067ffffffffffffffff167054a2b63d65d79d094abb6688000000000061451f565b8161302757fe5b0467ffffffffffffffff16808c526403fca0a271111561304a576403fca0a2718b525b5050613102565b670b1a2bc2ec5000008111156131025760006702c68af0bb14000061308a670de0b6b3a7640000611c1f85670b1a2bc2ec500000614556565b8161309157fe5b04905060006130a7612fdc8b611c1f858061451f565b8b519091507054a2b63d65d79d094abb66880000000000906130d39067ffffffffffffffff168361451f565b816130da57fe5b0467ffffffffffffffff16808c52653e4b4dea603810156130ff57653e4b4dea60388b525b50505b88516040517f33af5ce86e8438eff54589f85332916444457dfa8685493fbd579b809097026b9161313891899189918690615897565b60405180910390a1505086516011805460208a01516040909a015167ffffffffffffffff1990911667ffffffffffffffff938416176fffffffffffffffff000000000000000019166801000000000000000093909a1692909202989098176001600160801b03908116600160801b9190921602179096555050505050505b565b600c546001600160801b0380821691600160801b90041682565b60408051600481526024810182526020810180516001600160e01b03166306fdde0360e01b179052905160609160009183916001600160a01b038616916132199190615413565b600060405180830381855afa9150503d8060008114613254576040519150601f19603f3d011682016040523d82523d6000602084013e613259565b606091505b509150915081801561326c575060008151115b61329157604051806040016040528060038152602001623f3f3f60e81b8152506132a5565b808060200190518101906132a5919061530a565b925050505b919050565b60408051808201909152600d546001600160801b038082168352600160801b9091041660208201526000906132e6908360016147a7565b8151600d80546020948501516001600160801b03908116600160801b029381166001600160801b031990921691909117169190911790556001600160a01b0386166000908152600f9092526040909120549091506133449083614556565b6001600160a01b038086166000908152600f6020526040808220939093556008549251636d289ce560e11b815290927f000000000000000000000000000000000000000000000000000000000000000083169263da5139ca926133b292909116908690600190600401615874565b60206040518083038186803b1580156133ca57600080fd5b505afa1580156133de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134029190615374565b600c546008549192506001600160801b03169061342a906001600160a01b0316838388614604565b61344661343683614579565b6001600160801b038316906145d5565b600c80546001600160801b0319166001600160801b03929092169190911790556001600160a01b0386168561347b573361349d565b7f00000000000000000000000000000000000000000000000000000000000000005b6001600160a01b03167fc8e512d8f188ca059984b5853d2bf653da902696b8512785b182b2c813789a6e85876040516134d7929190615dcc565b60405180910390a350509392505050565b60006134f2614a2d565b50604080518082018252600c546001600160801b03808216808452600160801b90920481166020840152600854600d549451636d289ce560e11b8152939492936000936001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169463da5139ca9461357b949216921690600190600401615848565b60206040518083038186803b15801561359357600080fd5b505afa1580156135a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135cb9190615374565b83516001600160801b0316019050801561360d578061360084602001516001600160801b03168761451f90919063ffffffff16565b8161360757fe5b0461360f565b845b93506103e861363461362086614579565b60208601516001600160801b0316906145d5565b6001600160801b0316101561364f5760009350505050610bc8565b61365a83868661481c565b8051600c80546020938401516001600160801b03908116600160801b029381166001600160801b031990921691909117169190911790556001600160a01b03881660009081529081905260409020546136b39085613aba565b6001600160a01b038089166000908152602081905260409020919091556008546136e09116868489614604565b866001600160a01b0316866136f55733613717565b7f00000000000000000000000000000000000000000000000000000000000000005b6001600160a01b03167f30a8c4f9ab5af7e1309ca87c32377d1a83366c5990472dbf9d262450eae14e388787604051613751929190615dcc565b60405180910390a35050509392505050565b600061376d614a2d565b50604080518082018252600c546001600160801b038082168352600160801b90910481166020830152600854600d549351636d289ce560e11b815292936000936001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169463da5139ca946137f494921692911690600190600401615848565b60206040518083038186803b15801561380c57600080fd5b505afa158015613820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138449190615374565b825160208401516001600160801b0391821692909201925016613867858361451f565b8161386e57fe5b33600090815260208190526040902054919004935061388d9085614556565b336000908152602081905260409020556138a9611e2084614579565b6001600160801b031682526138c0611e4885614579565b6001600160801b0316602083018190526103e811156138f15760405162461bcd60e51b8152600401610a2990615c28565b8151600c805460208501516001600160801b03908116600160801b029381166001600160801b031990921691909117169190911790556040516001600160a01b0386169033907f6e853a5fd6b51d773691f542ebac8513c9992a51380d4c342031056a64114228906139669087908990615dcc565b60405180910390a3600854604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc926139c792919091169030908a9089906004016156fd565b600060405180830381600087803b1580156139e157600080fd5b505af11580156139f5573d6000803e3d6000fd5b50505050505092915050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009182916060916001600160a01b03861691613a489190615413565b600060405180830381855afa9150503d8060008114613a83576040519150601f19603f3d011682016040523d82523d6000602084013e613a88565b606091505b5091509150818015613a9b575080516020145b613aa65760126132a5565b808060200190518101906132a591906153cb565b81810181811015610b545760405162461bcd60e51b8152600401610a2990615a06565b60008080620186a0613af085603261451f565b81613af757fe5b049050613b37613b078583613aba565b60408051808201909152600d546001600160801b038082168352600160801b90910416602082015290600161486e565b8151600d80546020948501516001600160801b03908116600160801b029381166001600160801b03199092169190911716919091179055336000908152600f909252604090912054909350613b8c9084613aba565b336000818152600f6020526040908190209290925590516001600160a01b03871691907f3a5151e57d3bc9798e7853034ac52293d1a0e12a2b44725e75b03b21f86477a690613be090889086908990615dda565b60405180910390a3600854604051636d289ce560e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263da5139ca92613c409291909116908890600090600401615874565b60206040518083038186803b158015613c5857600080fd5b505afa158015613c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c909190615374565b9150613c9a614a2d565b5060408051808201909152600c546001600160801b038082168352600160801b90910416602082018190526103e81115613ce65760405162461bcd60e51b8152600401610a2990615c28565b613d03613cf284614579565b82516001600160801b0316906145a6565b6001600160801b03908116808352600c805460208501518416600160801b026001600160801b0319909116909217909216179055600854604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc92613d9092919091169030908b9089906004016156fd565b600060405180830381600087803b158015613daa57600080fd5b505af1158015613dbe573d6000803e3d6000fd5b5050505050509250929050565b6001600160a01b0383166000908152600f602052604081205480613df3576001915050610bc8565b6001600160a01b0385166000908152600e602052604090205480613e1c57600092505050610bc8565b613e24614a2d565b5060408051808201909152600d546001600160801b03808216808452600160801b909204166020830181905290613e62908790611c1f90879061451f565b81613e6957fe5b600754919004906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169163566231189116613ec98a613eb457620124f8613eb9565b62012cc85b611c1f886509184e72a00061451f565b60006040518463ffffffff1660e01b8152600401613ee993929190615874565b60206040518083038186803b158015613f0157600080fd5b505afa158015613f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f399190615374565b1015979650505050505050565b6000808412613f56575082610bc8565b600019841415613f67575081610bc8565b600119841415613f78575080610bc8565b60405162461bcd60e51b8152600401610a2990615a74565b336000908152600e6020526040902054613faa9082614556565b336000908152600e6020526040902055600b54613fc79082614556565b600b556040516001600160a01b0383169033907f8ad4d3ff00da092c7ad9a573ea4f5f6a3dffc6712dc06d3f78f49b862297c40290614007908590615dc3565b60405180910390a3600754604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc926140689291909116903090879087906004016156fd565b600060405180830381600087803b15801561408257600080fd5b505af1158015614096573d6000803e3d6000fd5b505050505050565b600080600080600080898060200190518101906140bb91906150a1565b93509350935093506140ce828989613f46565b91506140db818989613f46565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166302b9446c8a86338787876040518763ffffffff1660e01b8152600401614132959493929190615727565b60408051808303818588803b15801561414a57600080fd5b505af115801561415e573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190614183919061538c565b955095505050505094509492505050565b600080600080600080888060200190518101906141b191906150a1565b93509350935093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166397da6d308533866141f6878e8e613f46565b614201878f8f613f46565b6040518663ffffffff1660e01b8152600401614221959493929190615727565b6040805180830381600087803b15801561423a57600080fd5b505af115801561424e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614272919061538c565b9550955050505050935093915050565b606084801561428f575083155b156142bd5785836040516020016142a792919061542f565b6040516020818303038152906040529050610d76565b841580156142c85750835b156142e05785826040516020016142a792919061542f565b8480156142ea5750835b15614304578583836040516020016142a793929190615451565b5093949350505050565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415801561435b57506001600160a01b0383163014155b6143775760405162461bcd60e51b8152600401610a2990615ae2565b60006060846001600160a01b031686856040516143949190615413565b60006040518083038185875af1925050503d80600081146143d1576040519150601f19603f3d011682016040523d82523d6000602084013e6143d6565b606091505b5091509150816143e5826148bc565b906144035760405162461bcd60e51b8152600401610a299190615646565b5095945050505050565b600083602001516001600160801b03166000141561442c575081610bc8565b602084015184516001600160801b039182169161444b9186911661451f565b8161445257fe5b04905081801561449657508284600001516001600160801b031661448c86602001516001600160801b03168461451f90919063ffffffff16565b8161449357fe5b04105b15610bc857610b6f816001613aba565b82516000906001600160801b03166144bf575081610bc8565b835160208501516001600160801b03918216916144de9186911661451f565b816144e557fe5b04905081801561449657508284602001516001600160801b031661448c86600001516001600160801b03168461451f90919063ffffffff16565b600081158061453a5750508082028282828161453757fe5b04145b610b545760405162461bcd60e51b8152600401610a2990615d04565b80820382811115610b545760405162461bcd60e51b8152600401610a29906158bc565b60006001600160801b038211156145a25760405162461bcd60e51b8152600401610a29906159cf565b5090565b8082036001600160801b038084169082161115610b545760405162461bcd60e51b8152600401610a29906158bc565b8181016001600160801b038083169082161015610b545760405162461bcd60e51b8152600401610a2990615a06565b80156146805761465c827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f7888aec87306040518363ffffffff1660e01b815260040161218f9291906156e3565b83111561467b5760405162461bcd60e51b8152600401610a2990615c96565b614705565b604051633c6340f360e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc906146d29087903390309089906004016156fd565b600060405180830381600087803b1580156146ec57600080fd5b505af1158015614700573d6000803e3d6000fd5b505050505b50505050565b60408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b179052905160609160009183916001600160a01b038616916132199190615413565b600060405180604001604052806002815260200161190160f01b81525061477761491c565b8360405160200161478a93929190615451565b604051602081830303815290604052805190602001209050919050565b6147af614a2d565b60006147bc85858561440d565b90506147db6147ca82614579565b86516001600160801b0316906145a6565b6001600160801b031685526148066147f285614579565b60208701516001600160801b0316906145a6565b6001600160801b03166020860152939492505050565b614824614a2d565b61484161483084614579565b85516001600160801b0316906145d5565b6001600160801b0316845261485861362083614579565b6001600160801b03166020850152509192915050565b614876614a2d565b60006148838585856144a6565b9050614891612e7285614579565b6001600160801b031685526148066148a882614579565b60208701516001600160801b0316906145d5565b6060604482511015614902575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c7900000060208201526132aa565b60048201915081806020019051810190610b54919061530a565b6000467f000000000000000000000000000000000000000000000000000000000000000081146149545761494f8161497c565b614976565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b60007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218823060405160200161478a93929190615609565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106149f457805160ff1916838001178555614a21565b82800160010185558215614a21579182015b82811115614a21578251825591602001919060010190614a06565b506145a2929150614a64565b604080518082019091526000808252602082015290565b604080516060810182526000808252602082018190529181019190915290565b5b808211156145a25760008155600101614a65565b8035610b5481615f13565b60008083601f840112614a95578182fd5b50813567ffffffffffffffff811115614aac578182fd5b6020830191508360208083028501011115610fa257600080fd5b600082601f830112614ad6578081fd5b8135614ae9614ae482615e97565b615e70565b818152915060208083019084810181840286018201871015614b0a57600080fd5b60005b84811015614b2957813584529282019290820190600101614b0d565b505050505092915050565b60008083601f840112614b45578182fd5b50813567ffffffffffffffff811115614b5c578182fd5b602083019150836020828501011115610fa257600080fd5b600082601f830112614b84578081fd5b8135614b92614ae482615eb7565b9150808252836020828501011115614ba957600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215614bd3578081fd5b8135610bc881615f13565b600060208284031215614bef578081fd5b8151610bc881615f13565b60008060008060008060c08789031215614c12578182fd5b8635614c1d81615f13565b95506020870135614c2d81615f13565b94506040870135614c3d81615f2b565b93506060870135614c4d81615f39565b9598949750929560808101359460a0909101359350915050565b600080600080600060a08688031215614c7e578283fd5b8535614c8981615f13565b9450602086013567ffffffffffffffff811115614ca4578384fd5b614cb088828901614b74565b9450506040860135614cc181615f2b565b92506060860135614cd181615f2b565b91506080860135614ce181615f39565b809150509295509295909350565b60008060408385031215614d01578182fd5b8235614d0c81615f13565b91506020830135614d1c81615f13565b809150509250929050565b600080600060608486031215614d3b578081fd5b8335614d4681615f13565b92506020840135614d5681615f13565b929592945050506040919091013590565b600080600080600080600060e0888a031215614d81578485fd5b8735614d8c81615f13565b96506020880135614d9c81615f13565b955060408801359450606088013593506080880135614dba81615f39565b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215614de9578182fd5b8235614df481615f13565b91506020830135614d1c81615f2b565b600080600060608486031215614e18578081fd5b8335614e2381615f13565b92506020840135614e3381615f2b565b91506040840135614e4381615f2b565b809150509250925092565b600080600060608486031215614e62578081fd5b8335614e6d81615f13565b92506020840135614d5681615f2b565b60008060408385031215614e8f578182fd5b8235614e9a81615f13565b946020939093013593505050565b600080600080600080600060a0888a031215614ec2578081fd5b873567ffffffffffffffff80821115614ed9578283fd5b614ee58b838c01614a84565b909950975060208a0135915080821115614efd578283fd5b50614f0a8a828b01614a84565b9096509450506040880135614f1e81615f13565b92506060880135614f2e81615f13565b91506080880135614f3e81615f2b565b8091505092959891949750929550565b60008060008060008060608789031215614f66578384fd5b863567ffffffffffffffff80821115614f7d578586fd5b614f898a838b01614a84565b90985096506020890135915080821115614fa1578586fd5b614fad8a838b01614a84565b90965094506040890135915080821115614fc5578384fd5b50614fd289828a01614a84565b979a9699509497509295939492505050565b600060208284031215614ff5578081fd5b8151610bc881615f2b565b60008060408385031215615012578182fd5b825161501d81615f2b565b6020939093015192949293505050565b600080600060608486031215615041578081fd5b833561504c81615f2b565b95602085013595506040909401359392505050565b60008060208385031215615073578182fd5b823567ffffffffffffffff811115615089578283fd5b61509585828601614b34565b90969095509350505050565b600080600080608085870312156150b6578182fd5b84516150c181615f13565b60208601519094506150d281615f13565b6040860151606090960151949790965092505050565b6000806000606084860312156150fc578081fd5b833561510781615f13565b925060208481013567ffffffffffffffff80821115615124578384fd5b818701915087601f830112615137578384fd5b8135615145614ae482615e97565b81815284810190848601868402860187018c1015615161578788fd5b8795505b8386101561518b576151778c82614a79565b835260019590950194918601918601615165565b509650505060408701359250808311156151a3578384fd5b50506151b186828701614ac6565b9150509250925092565b6000806000806000608086880312156151d2578283fd5b85356151dd81615f13565b945060208601356151ed81615f13565b935060408601356151fd81615f13565b9250606086013567ffffffffffffffff811115615218578182fd5b61522488828901614b34565b969995985093965092949392505050565b6000806000806080858703121561524a578182fd5b843561525581615f13565b9350602085013561526581615f13565b9250604085013561527581615f13565b9150606085013567ffffffffffffffff811115615290578182fd5b61529c87828801614b74565b91505092959194509250565b6000602082840312156152b9578081fd5b5035919050565b600080604083850312156152d2578182fd5b823591506020830135614d1c81615f13565b6000806000606084860312156152f8578081fd5b833592506020840135614e3381615f13565b60006020828403121561531b578081fd5b815167ffffffffffffffff811115615331578182fd5b8201601f81018413615341578182fd5b805161534f614ae482615eb7565b818152856020838501011115615363578384fd5b610d76826020830160208601615ee7565b600060208284031215615385578081fd5b5051919050565b6000806040838503121561539e578182fd5b505080516020909101519092909150565b6000602082840312156153c0578081fd5b8135610bc881615f39565b6000602082840312156153dc578081fd5b8151610bc881615f39565b600081518084526153ff816020860160208601615ee7565b601f01601f19169290920160200192915050565b60008251615425818460208701615ee7565b9190910192915050565b60008351615441818460208801615ee7565b9190910191825250602001919050565b60008451615463818460208901615ee7565b91909101928352506020820152604001919050565b60007f4b61736869204d6564205269736b200000000000000000000000000000000000825284516154b081600f850160208901615ee7565b601f60f91b600f9184019182015284516154d1816010840160208901615ee7565b602d60f81b6010929091019182015283516154f3816011840160208801615ee7565b0160110195945050505050565b600061626d60f01b8252845161551d816002850160208901615ee7565b601f60f91b600291840191820152845161553e816003840160208901615ee7565b602d60f81b600392909101918201528351615560816004840160208801615ee7565b0160040195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b039687168152949095166020850152911515604084015260ff166060830152608082015260a081019190915260c00190565b901515815260200190565b9115158252602082015260400190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b92835260208301919091526001600160a01b0316604082015260600190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610bc860208301846153e7565b60006020808301818452828554600180821660008114615680576001811461569e576156d6565b60028304607f16855260ff19831660408901526060880193506156d6565b600283048086526156ae8a615edb565b885b828110156156cc5781548b8201604001529084019088016156b0565b8a01604001955050505b5091979650505050505050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b6000608082016001600160a01b0380881684526020818816818601526080604086015282875180855260a0870191508289019450855b818110156157af578551851683529483019491830191600101615791565b50508581036060870152865180825290820193509150808601845b838110156157e6578151855293820193908201906001016157ca565b50929998505050505050505050565b60006001600160a01b038088168352808716602084015280861660408401525060806060830152826080830152828460a084013781830160a090810191909152601f909201601f19160101949350505050565b6001600160a01b039390931683526001600160801b039190911660208301521515604082015260600190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b938452602084019290925267ffffffffffffffff166040830152606082015260800190565b60208082526015908201527f426f72696e674d6174683a20556e646572666c6f770000000000000000000000604082015260600190565b6020808252601e908201527f4b61736869506169723a20616c726561647920696e697469616c697a65640000604082015260600190565b60208082526016908201527f45524332303a206e6f207a65726f206164647265737300000000000000000000604082015260600190565b6020808252601a908201527f4b61736869506169723a20616c6c2061726520736f6c76656e74000000000000604082015260600190565b60208082526015908201527f4f776e61626c653a207a65726f20616464726573730000000000000000000000604082015260600190565b6020808252601c908201527f426f72696e674d6174683a2075696e74313238204f766572666c6f7700000000604082015260600190565b60208082526018908201527f426f72696e674d6174683a20416464204f766572666c6f770000000000000000604082015260600190565b60208082526013908201527f4b61736869506169723a20626164207061697200000000000000000000000000604082015260600190565b6020808252601c908201527f4b61736869506169723a204e756d206f7574206f6620626f756e647300000000604082015260600190565b60208082526018908201527f45524332303a20616c6c6f77616e636520746f6f206c6f770000000000000000604082015260600190565b60208082526015908201527f4b61736869506169723a2063616e27742063616c6c0000000000000000000000604082015260600190565b6020808252600e908201527f45524332303a2045787069726564000000000000000000000000000000000000604082015260600190565b60208082526019908201527f4b61736869506169723a207573657220696e736f6c76656e7400000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604082015260600190565b60208082526018908201527f45524332303a204f776e65722063616e6e6f7420626520300000000000000000604082015260600190565b60208082526014908201527f4b617368693a2062656c6f77206d696e696d756d000000000000000000000000604082015260600190565b60208082526016908201527f45524332303a2062616c616e636520746f6f206c6f7700000000000000000000604082015260600190565b60208082526018908201527f4b61736869506169723a20536b696d20746f6f206d7563680000000000000000604082015260600190565b6020808252601a908201527f4b61736869506169723a20496e76616c69642073776170706572000000000000604082015260600190565b60208082526018908201527f426f72696e674d6174683a204d756c204f766572666c6f770000000000000000604082015260600190565b60208082526016908201527f4b61736869506169723a2072617465206e6f74206f6b00000000000000000000604082015260600190565b60208082526018908201527f45524332303a20496e76616c6964205369676e61747572650000000000000000604082015260600190565b6001600160801b0392831681529116602082015260400190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b67ffffffffffffffff93841681529190921660208201526001600160801b03909116604082015260600190565b60ff91909116815260200190565b6000808335601e19843603018112615e41578283fd5b83018035915067ffffffffffffffff821115615e5b578283fd5b602001915036819003821315610fa257600080fd5b60405181810167ffffffffffffffff81118282101715615e8f57600080fd5b604052919050565b600067ffffffffffffffff821115615ead578081fd5b5060209081020190565b600067ffffffffffffffff821115615ecd578081fd5b50601f01601f191660200190565b60009081526020902090565b60005b83811015615f02578181015183820152602001615eea565b838111156147055750506000910152565b6001600160a01b0381168114615f2857600080fd5b50565b8015158114615f2857600080fd5b60ff81168114615f2857600080fdfea2646970667358221220c52bc5ead87386c963e1bcb8cdf4a7805ab0bf38f7c5acc48af3dbf01822f70264736f6c634300060c0033",
    "devdoc": {
        "details": "This contract allows contract calls to any contract (except BentoBox) from arbitrary callers thus, don't trust calls from this contract in any circumstances.",
        "kind": "dev",
        "methods": {
            "addAsset(address,bool,uint256)": {
                "params": {
                    "share": "The amount of shares to add.",
                    "skim": "True if the amount should be skimmed from the deposit balance of msg.sender. False if tokens from msg.sender in `bentoBox` should be transferred.",
                    "to": "The address of the user to receive the assets."
                },
                "returns": {
                    "fraction": "Total fractions added."
                }
            },
            "addCollateral(address,bool,uint256)": {
                "params": {
                    "share": "The amount of shares to add for `to`.",
                    "skim": "True if the amount should be skimmed from the deposit balance of msg.sender. False if tokens from msg.sender in `bentoBox` should be transferred.",
                    "to": "The receiver of the tokens."
                }
            },
            "approve(address,uint256)": {
                "params": {
                    "amount": "The maximum collective amount that `spender` can draw.",
                    "spender": "Address of the party that can draw from msg.sender's account."
                },
                "returns": {
                    "_0": "(bool) Returns True if approved."
                }
            },
            "borrow(address,uint256)": {
                "returns": {
                    "part": "Total part of the debt held by borrowers.",
                    "share": "Total amount in shares borrowed."
                }
            },
            "cook(uint8[],uint256[],bytes[])": {
                "params": {
                    "actions": "An array with a sequence of actions to execute (see ACTION_ declarations).",
                    "datas": "A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.",
                    "values": "A one-to-one mapped array to `actions`. ETH amounts to send along with the actions. Only applicable to `ACTION_CALL`, `ACTION_BENTO_DEPOSIT`."
                },
                "returns": {
                    "value1": "May contain the first positioned return value of the last executed action (if applicable).",
                    "value2": "May contain the second positioned return value of the last executed action which returns 2 values (if applicable)."
                }
            },
            "init(bytes)": {
                "details": "`data` is abi encoded in the format: (IERC20 collateral, IERC20 asset, IOracle oracle, bytes oracleData)"
            },
            "isSolvent(address,bool)": {
                "params": {
                    "open": "If True then the check is perfomed with `OPEN_COLLATERIZATION_RATE` else with `CLOSED_COLLATERIZATION_RATE`.",
                    "user": "The address of the user in question."
                },
                "returns": {
                    "_0": "(bool) User is solvent if True."
                }
            },
            "liquidate(address[],uint256[],address,address,bool)": {
                "params": {
                    "borrowParts": "A one-to-one mapping to `users`, contains partial borrow amounts (to liquidate) of the respective user.",
                    "open": "True to perform a open liquidation else False.",
                    "swapper": "Contract address of the `ISwapper` implementation. Swappers are restricted for closed liquidations. See `setSwapper`.",
                    "to": "Address of the receiver in open liquidations if `swapper` is zero.",
                    "users": "An array of user addresses."
                }
            },
            "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
                "params": {
                    "deadline": "This permit must be redeemed before this deadline (UTC timestamp in seconds).",
                    "owner_": "Address of the owner.",
                    "spender": "The address of the spender that gets approved to draw from `owner_`.",
                    "value": "The maximum collective amount that `spender` can draw."
                }
            },
            "removeAsset(address,uint256)": {
                "params": {
                    "fraction": "The amount/fraction of assets held to remove.",
                    "to": "The user that receives the removed assets."
                },
                "returns": {
                    "share": "The amount of shares transferred to `to`."
                }
            },
            "removeCollateral(address,uint256)": {
                "params": {
                    "share": "Amount of shares to remove.",
                    "to": "The receiver of the shares."
                }
            },
            "repay(address,bool,uint256)": {
                "params": {
                    "part": "The amount to repay. See `userBorrowPart`.",
                    "skim": "True if the amount should be skimmed from the deposit balance of msg.sender. False if tokens from msg.sender in `bentoBox` should be transferred.",
                    "to": "Address of the user this payment should go."
                },
                "returns": {
                    "amount": "The total amount repayed."
                }
            },
            "setFeeTo(address)": {
                "params": {
                    "newFeeTo": "The address of the receiver."
                }
            },
            "setSwapper(address,bool)": {
                "params": {
                    "enable": "True to enable the swapper. To disable use False.",
                    "swapper": "The address of the swapper contract that conforms to `ISwapper`."
                }
            },
            "transfer(address,uint256)": {
                "params": {
                    "amount": "of the tokens to move.",
                    "to": "The address to move the tokens."
                },
                "returns": {
                    "_0": "(bool) Returns True if succeeded."
                }
            },
            "transferFrom(address,address,uint256)": {
                "params": {
                    "amount": "The token amount to move.",
                    "from": "Address to draw tokens from.",
                    "to": "The address to move the tokens."
                },
                "returns": {
                    "_0": "(bool) Returns True if succeeded."
                }
            },
            "transferOwnership(address,bool,bool)": {
                "params": {
                    "direct": "True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.",
                    "newOwner": "Address of the new owner.",
                    "renounce": "Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."
                }
            },
            "updateExchangeRate()": {
                "returns": {
                    "rate": "The new exchange rate.",
                    "updated": "True if `exchangeRate` was updated."
                }
            }
        },
        "title": "KashiPair",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "accrue()": {
                "notice": "Accrues the interest on the borrowed tokens and handles the accumulation of fees."
            },
            "addAsset(address,bool,uint256)": {
                "notice": "Adds assets to the lending pair."
            },
            "addCollateral(address,bool,uint256)": {
                "notice": "Adds `collateral` from msg.sender to the account `to`."
            },
            "allowance(address,address)": {
                "notice": "owner > spender > allowance mapping."
            },
            "approve(address,uint256)": {
                "notice": "Approves `amount` from sender to be spend by `spender`."
            },
            "balanceOf(address)": {
                "notice": "owner > balance mapping."
            },
            "borrow(address,uint256)": {
                "notice": "Sender borrows `amount` and transfers it to `to`."
            },
            "claimOwnership()": {
                "notice": "Needs to be called by `pendingOwner` to claim ownership."
            },
            "constructor": "The constructor is only used for the initial master contract. Subsequent clones are initialised via `init`.",
            "cook(uint8[],uint256[],bytes[])": {
                "notice": "Executes a set of actions and allows composability (contract calls) to other contracts."
            },
            "exchangeRate()": {
                "notice": "Exchange and interest rate tracking. This is 'cached' here because calls to Oracles can be very expensive."
            },
            "getInitData(address,address,address,bytes)": {
                "notice": "Helper function to get the abi encoded bytes for the `init` function."
            },
            "init(bytes)": {
                "notice": "Serves as the constructor for clones, as clones can't have a regular constructor"
            },
            "isSolvent(address,bool)": {
                "notice": "Checks if the user is solvent. Has an option `open` to check if the user is solvent in an open/closed liquidation case."
            },
            "liquidate(address[],uint256[],address,address,bool)": {
                "notice": "Handles the liquidation of users' balances, once the users' amount of collateral is too low."
            },
            "nonces(address)": {
                "notice": "owner > nonce mapping. Used in `permit`."
            },
            "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
                "notice": "Approves `value` from `owner_` to be spend by `spender`."
            },
            "removeAsset(address,uint256)": {
                "notice": "Removes an asset from msg.sender and transfers it to `to`."
            },
            "removeCollateral(address,uint256)": {
                "notice": "Removes `share` amount of collateral and transfers it to `to`."
            },
            "repay(address,bool,uint256)": {
                "notice": "Repays a loan."
            },
            "setFeeTo(address)": {
                "notice": "Sets the beneficiary of fees accrued in liquidations. MasterContract Only Admin function."
            },
            "setSwapper(address,bool)": {
                "notice": "Used to register and enable or disable swapper contracts used in closed liquidations. MasterContract Only Admin function."
            },
            "transfer(address,uint256)": {
                "notice": "Transfers `amount` tokens from `msg.sender` to `to`."
            },
            "transferFrom(address,address,uint256)": {
                "notice": "Transfers `amount` tokens from `from` to `to`. Caller needs approval for `from`."
            },
            "transferOwnership(address,bool,bool)": {
                "notice": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."
            },
            "updateExchangeRate()": {
                "notice": "Gets the exchange rate. I.e how much collateral to buy 1e18 asset. This function is supposed to be invoked if needed because Oracle queries can be expensive."
            },
            "withdrawFees()": {
                "notice": "Withdraws the fees accumulated."
            }
        },
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 417,
                "contract": "contracts/flat/KashiPairFlat.sol:KashiPairMediumRiskV1",
                "label": "balanceOf",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 424,
                "contract": "contracts/flat/KashiPairFlat.sol:KashiPairMediumRiskV1",
                "label": "allowance",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
            },
            {
                "astId": 429,
                "contract": "contracts/flat/KashiPairFlat.sol:KashiPairMediumRiskV1",
                "label": "nonces",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 202,
                "contract": "contracts/flat/KashiPairFlat.sol:KashiPairMediumRiskV1",
                "label": "owner",
                "offset": 0,
                "slot": "3",
                "type": "t_address"
            },
            {
                "astId": 204,
                "contract": "contracts/flat/KashiPairFlat.sol:KashiPairMediumRiskV1",
                "label": "pendingOwner",
                "offset": 0,
                "slot": "4",
                "type": "t_address"
            },
            {
                "astId": 1906,
                "contract": "contracts/flat/KashiPairFlat.sol:KashiPairMediumRiskV1",
                "label": "feeTo",
                "offset": 0,
                "slot": "5",
                "type": "t_address"
            },
            {
                "astId": 1910,
                "contract": "contracts/flat/KashiPairFlat.sol:KashiPairMediumRiskV1",
                "label": "swappers",
                "offset": 0,
                "slot": "6",
                "type": "t_mapping(t_contract(ISwapper)1799,t_bool)"
            },
            {
                "astId": 1912,
                "contract": "contracts/flat/KashiPairFlat.sol:KashiPairMediumRiskV1",
                "label": "collateral",
                "offset": 0,
                "slot": "7",
                "type": "t_contract(IERC20)1112"
            },
            {
                "astId": 1914,
                "contract": "contracts/flat/KashiPairFlat.sol:KashiPairMediumRiskV1",
                "label": "asset",
                "offset": 0,
                "slot": "8",
                "type": "t_contract(IERC20)1112"
            },
            {
                "astId": 1916,
                "contract": "contracts/flat/KashiPairFlat.sol:KashiPairMediumRiskV1",
                "label": "oracle",
                "offset": 0,
                "slot": "9",
                "type": "t_contract(IOracle)1760"
            },
            {
                "astId": 1918,
                "contract": "contracts/flat/KashiPairFlat.sol:KashiPairMediumRiskV1",
                "label": "oracleData",
                "offset": 0,
                "slot": "10",
                "type": "t_bytes_storage"
            },
            {
                "astId": 1920,
                "contract": "contracts/flat/KashiPairFlat.sol:KashiPairMediumRiskV1",
                "label": "totalCollateralShare",
                "offset": 0,
                "slot": "11",
                "type": "t_uint256"
            },
            {
                "astId": 1922,
                "contract": "contracts/flat/KashiPairFlat.sol:KashiPairMediumRiskV1",
                "label": "totalAsset",
                "offset": 0,
                "slot": "12",
                "type": "t_struct(Rebase)747_storage"
            },
            {
                "astId": 1924,
                "contract": "contracts/flat/KashiPairFlat.sol:KashiPairMediumRiskV1",
                "label": "totalBorrow",
                "offset": 0,
                "slot": "13",
                "type": "t_struct(Rebase)747_storage"
            },
            {
                "astId": 1928,
                "contract": "contracts/flat/KashiPairFlat.sol:KashiPairMediumRiskV1",
                "label": "userCollateralShare",
                "offset": 0,
                "slot": "14",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 1932,
                "contract": "contracts/flat/KashiPairFlat.sol:KashiPairMediumRiskV1",
                "label": "userBorrowPart",
                "offset": 0,
                "slot": "15",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 1935,
                "contract": "contracts/flat/KashiPairFlat.sol:KashiPairMediumRiskV1",
                "label": "exchangeRate",
                "offset": 0,
                "slot": "16",
                "type": "t_uint256"
            },
            {
                "astId": 1944,
                "contract": "contracts/flat/KashiPairFlat.sol:KashiPairMediumRiskV1",
                "label": "accrueInfo",
                "offset": 0,
                "slot": "17",
                "type": "t_struct(AccrueInfo)1942_storage"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
            },
            "t_bytes_storage": {
                "encoding": "bytes",
                "label": "bytes",
                "numberOfBytes": "32"
            },
            "t_contract(IERC20)1112": {
                "encoding": "inplace",
                "label": "contract IERC20",
                "numberOfBytes": "20"
            },
            "t_contract(IOracle)1760": {
                "encoding": "inplace",
                "label": "contract IOracle",
                "numberOfBytes": "20"
            },
            "t_contract(ISwapper)1799": {
                "encoding": "inplace",
                "label": "contract ISwapper",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(address => uint256))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_uint256)"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_mapping(t_contract(ISwapper)1799,t_bool)": {
                "encoding": "mapping",
                "key": "t_contract(ISwapper)1799",
                "label": "mapping(contract ISwapper => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
            },
            "t_struct(AccrueInfo)1942_storage": {
                "encoding": "inplace",
                "label": "struct KashiPairMediumRiskV1.AccrueInfo",
                "members": [
                    {
                        "astId": 1937,
                        "contract": "contracts/flat/KashiPairFlat.sol:KashiPairMediumRiskV1",
                        "label": "interestPerSecond",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint64"
                    },
                    {
                        "astId": 1939,
                        "contract": "contracts/flat/KashiPairFlat.sol:KashiPairMediumRiskV1",
                        "label": "lastAccrued",
                        "offset": 8,
                        "slot": "0",
                        "type": "t_uint64"
                    },
                    {
                        "astId": 1941,
                        "contract": "contracts/flat/KashiPairFlat.sol:KashiPairMediumRiskV1",
                        "label": "feesEarnedFraction",
                        "offset": 16,
                        "slot": "0",
                        "type": "t_uint128"
                    }
                ],
                "numberOfBytes": "32"
            },
            "t_struct(Rebase)747_storage": {
                "encoding": "inplace",
                "label": "struct Rebase",
                "members": [
                    {
                        "astId": 744,
                        "contract": "contracts/flat/KashiPairFlat.sol:KashiPairMediumRiskV1",
                        "label": "elastic",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint128"
                    },
                    {
                        "astId": 746,
                        "contract": "contracts/flat/KashiPairFlat.sol:KashiPairMediumRiskV1",
                        "label": "base",
                        "offset": 16,
                        "slot": "0",
                        "type": "t_uint128"
                    }
                ],
                "numberOfBytes": "32"
            },
            "t_uint128": {
                "encoding": "inplace",
                "label": "uint128",
                "numberOfBytes": "16"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            },
            "t_uint64": {
                "encoding": "inplace",
                "label": "uint64",
                "numberOfBytes": "8"
            }
        }
    }
}
